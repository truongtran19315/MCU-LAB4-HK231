
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003604  08003604  00013604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003670  08003670  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003670  08003670  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003670  08003670  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  080036d4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080036d4  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db5b  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021fc  00000000  00000000  0002dc23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  0002fe20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a4d  00000000  00000000  00030b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a35  00000000  00000000  000315c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000102e9  00000000  00000000  00049ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d093  00000000  00000000  0005a2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ba0  00000000  00000000  000e7378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000eaf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080035ec 	.word	0x080035ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080035ec 	.word	0x080035ec

0800014c <fsm_command_parser>:
//#include "stm32f1xx_hal_adc.h"
#include "fsm_command_parser.h"

int current_index = 0;

void fsm_command_parser(ADC_HandleTypeDef hadc1, UART_HandleTypeDef huart2) {
 800014c:	b084      	sub	sp, #16
 800014e:	b490      	push	{r4, r7}
 8000150:	af00      	add	r7, sp, #0
 8000152:	f107 0408 	add.w	r4, r7, #8
 8000156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	switch(status_parser) {
 800015a:	4b1e      	ldr	r3, [pc, #120]	; (80001d4 <fsm_command_parser+0x88>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b02      	cmp	r3, #2
 8000160:	d015      	beq.n	800018e <fsm_command_parser+0x42>
 8000162:	2b02      	cmp	r3, #2
 8000164:	dc2b      	bgt.n	80001be <fsm_command_parser+0x72>
 8000166:	2b00      	cmp	r3, #0
 8000168:	d002      	beq.n	8000170 <fsm_command_parser+0x24>
 800016a:	2b01      	cmp	r3, #1
 800016c:	d004      	beq.n	8000178 <fsm_command_parser+0x2c>
				status_parser = WAIT_TOKEN;
				cmd_flag = 1;
			}
			break;
		default:
			break;
 800016e:	e026      	b.n	80001be <fsm_command_parser+0x72>
			status_parser = WAIT_TOKEN;
 8000170:	4b18      	ldr	r3, [pc, #96]	; (80001d4 <fsm_command_parser+0x88>)
 8000172:	2201      	movs	r2, #1
 8000174:	601a      	str	r2, [r3, #0]
			break;
 8000176:	e027      	b.n	80001c8 <fsm_command_parser+0x7c>
			if (temp == '!') {
 8000178:	4b17      	ldr	r3, [pc, #92]	; (80001d8 <fsm_command_parser+0x8c>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b21      	cmp	r3, #33	; 0x21
 800017e:	d120      	bne.n	80001c2 <fsm_command_parser+0x76>
				status_parser = RECEIVE_DATA;
 8000180:	4b14      	ldr	r3, [pc, #80]	; (80001d4 <fsm_command_parser+0x88>)
 8000182:	2202      	movs	r2, #2
 8000184:	601a      	str	r2, [r3, #0]
				current_index = 0;
 8000186:	4b15      	ldr	r3, [pc, #84]	; (80001dc <fsm_command_parser+0x90>)
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
			break;
 800018c:	e019      	b.n	80001c2 <fsm_command_parser+0x76>
			if (temp != '#') {
 800018e:	4b12      	ldr	r3, [pc, #72]	; (80001d8 <fsm_command_parser+0x8c>)
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	2b23      	cmp	r3, #35	; 0x23
 8000194:	d008      	beq.n	80001a8 <fsm_command_parser+0x5c>
				command_parser_data[current_index++] = temp;
 8000196:	4b11      	ldr	r3, [pc, #68]	; (80001dc <fsm_command_parser+0x90>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	1c5a      	adds	r2, r3, #1
 800019c:	490f      	ldr	r1, [pc, #60]	; (80001dc <fsm_command_parser+0x90>)
 800019e:	600a      	str	r2, [r1, #0]
 80001a0:	4a0d      	ldr	r2, [pc, #52]	; (80001d8 <fsm_command_parser+0x8c>)
 80001a2:	7811      	ldrb	r1, [r2, #0]
 80001a4:	4a0e      	ldr	r2, [pc, #56]	; (80001e0 <fsm_command_parser+0x94>)
 80001a6:	54d1      	strb	r1, [r2, r3]
			if (temp == '#') {
 80001a8:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <fsm_command_parser+0x8c>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b23      	cmp	r3, #35	; 0x23
 80001ae:	d10a      	bne.n	80001c6 <fsm_command_parser+0x7a>
				status_parser = WAIT_TOKEN;
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <fsm_command_parser+0x88>)
 80001b2:	2201      	movs	r2, #1
 80001b4:	601a      	str	r2, [r3, #0]
				cmd_flag = 1;
 80001b6:	4b0b      	ldr	r3, [pc, #44]	; (80001e4 <fsm_command_parser+0x98>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	601a      	str	r2, [r3, #0]
			break;
 80001bc:	e003      	b.n	80001c6 <fsm_command_parser+0x7a>
			break;
 80001be:	bf00      	nop
 80001c0:	e002      	b.n	80001c8 <fsm_command_parser+0x7c>
			break;
 80001c2:	bf00      	nop
 80001c4:	e000      	b.n	80001c8 <fsm_command_parser+0x7c>
			break;
 80001c6:	bf00      	nop
	}
}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc90      	pop	{r4, r7}
 80001ce:	b004      	add	sp, #16
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	200000bc 	.word	0x200000bc
 80001d8:	200000c5 	.word	0x200000c5
 80001dc:	20000078 	.word	0x20000078
 80001e0:	2000009c 	.word	0x2000009c
 80001e4:	200000c8 	.word	0x200000c8

080001e8 <check_receive_RST>:
 */


#include "fsm_uart_communiation.h"

int check_receive_RST() {
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	if (command_parser_data[0] == 'R' && command_parser_data[1] == 'S' && command_parser_data[2] == 'T') {
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <check_receive_RST+0x2c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	2b52      	cmp	r3, #82	; 0x52
 80001f2:	d109      	bne.n	8000208 <check_receive_RST+0x20>
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <check_receive_RST+0x2c>)
 80001f6:	785b      	ldrb	r3, [r3, #1]
 80001f8:	2b53      	cmp	r3, #83	; 0x53
 80001fa:	d105      	bne.n	8000208 <check_receive_RST+0x20>
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <check_receive_RST+0x2c>)
 80001fe:	789b      	ldrb	r3, [r3, #2]
 8000200:	2b54      	cmp	r3, #84	; 0x54
 8000202:	d101      	bne.n	8000208 <check_receive_RST+0x20>
		return 1;
 8000204:	2301      	movs	r3, #1
 8000206:	e000      	b.n	800020a <check_receive_RST+0x22>
	}
	return 0;
 8000208:	2300      	movs	r3, #0
}
 800020a:	4618      	mov	r0, r3
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	2000009c 	.word	0x2000009c

08000218 <check_receive_OK>:

int check_receive_OK() {
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	if (command_parser_data[0] == 'O' && command_parser_data[1] == 'K') {
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <check_receive_OK+0x24>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	2b4f      	cmp	r3, #79	; 0x4f
 8000222:	d105      	bne.n	8000230 <check_receive_OK+0x18>
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <check_receive_OK+0x24>)
 8000226:	785b      	ldrb	r3, [r3, #1]
 8000228:	2b4b      	cmp	r3, #75	; 0x4b
 800022a:	d101      	bne.n	8000230 <check_receive_OK+0x18>
		return 1;
 800022c:	2301      	movs	r3, #1
 800022e:	e000      	b.n	8000232 <check_receive_OK+0x1a>
	}
	return 0;
 8000230:	2300      	movs	r3, #0
}
 8000232:	4618      	mov	r0, r3
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	2000009c 	.word	0x2000009c

08000240 <fsm_uart_communiation>:

void fsm_uart_communiation(ADC_HandleTypeDef hadc1, UART_HandleTypeDef huart2) {
 8000240:	b084      	sub	sp, #16
 8000242:	b580      	push	{r7, lr}
 8000244:	af00      	add	r7, sp, #0
 8000246:	f107 0c08 	add.w	ip, r7, #8
 800024a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch(status_communicate) {
 800024e:	4b2e      	ldr	r3, [pc, #184]	; (8000308 <fsm_uart_communiation+0xc8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b0c      	cmp	r3, #12
 8000254:	d026      	beq.n	80002a4 <fsm_uart_communiation+0x64>
 8000256:	2b0c      	cmp	r3, #12
 8000258:	dc4b      	bgt.n	80002f2 <fsm_uart_communiation+0xb2>
 800025a:	2b00      	cmp	r3, #0
 800025c:	d002      	beq.n	8000264 <fsm_uart_communiation+0x24>
 800025e:	2b0b      	cmp	r3, #11
 8000260:	d004      	beq.n	800026c <fsm_uart_communiation+0x2c>
				status_communicate = WAIT_COMMAND_RST;
			}
		}
		break;
	default:
		break;
 8000262:	e046      	b.n	80002f2 <fsm_uart_communiation+0xb2>
		status_communicate = WAIT_COMMAND_RST;
 8000264:	4b28      	ldr	r3, [pc, #160]	; (8000308 <fsm_uart_communiation+0xc8>)
 8000266:	220b      	movs	r2, #11
 8000268:	601a      	str	r2, [r3, #0]
		break;
 800026a:	e047      	b.n	80002fc <fsm_uart_communiation+0xbc>
		if (cmd_flag == 1) {
 800026c:	4b27      	ldr	r3, [pc, #156]	; (800030c <fsm_uart_communiation+0xcc>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d140      	bne.n	80002f6 <fsm_uart_communiation+0xb6>
			cmd_flag = 0;
 8000274:	4b25      	ldr	r3, [pc, #148]	; (800030c <fsm_uart_communiation+0xcc>)
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
			if (check_receive_RST() == 1) {
 800027a:	f7ff ffb5 	bl	80001e8 <check_receive_RST>
 800027e:	4603      	mov	r3, r0
 8000280:	2b01      	cmp	r3, #1
 8000282:	d138      	bne.n	80002f6 <fsm_uart_communiation+0xb6>
				status_communicate = SEND_DATA;
 8000284:	4b20      	ldr	r3, [pc, #128]	; (8000308 <fsm_uart_communiation+0xc8>)
 8000286:	220c      	movs	r2, #12
 8000288:	601a      	str	r2, [r3, #0]
				setTimer1(3000);
 800028a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800028e:	f000 fa05 	bl	800069c <setTimer1>
				ADC_value = HAL_ADC_GetValue(&hadc1);
 8000292:	f107 0008 	add.w	r0, r7, #8
 8000296:	f000 fdbf 	bl	8000e18 <HAL_ADC_GetValue>
 800029a:	4603      	mov	r3, r0
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <fsm_uart_communiation+0xd0>)
 80002a0:	701a      	strb	r2, [r3, #0]
		break;
 80002a2:	e028      	b.n	80002f6 <fsm_uart_communiation+0xb6>
		if (timer1_flag == 1) {
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <fsm_uart_communiation+0xd4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d102      	bne.n	80002b2 <fsm_uart_communiation+0x72>
			status_communicate = WAIT_COMMAND_RST;
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <fsm_uart_communiation+0xc8>)
 80002ae:	220b      	movs	r2, #11
 80002b0:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (void *)buffer_tx, sprintf(buffer_tx, "!ADC=%.4d#", ADC_value), 1000);
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <fsm_uart_communiation+0xd0>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	461a      	mov	r2, r3
 80002b8:	4917      	ldr	r1, [pc, #92]	; (8000318 <fsm_uart_communiation+0xd8>)
 80002ba:	4818      	ldr	r0, [pc, #96]	; (800031c <fsm_uart_communiation+0xdc>)
 80002bc:	f002 fce4 	bl	8002c88 <siprintf>
 80002c0:	4603      	mov	r3, r0
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80002c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002cc:	4913      	ldr	r1, [pc, #76]	; (800031c <fsm_uart_communiation+0xdc>)
 80002ce:	f002 fafd 	bl	80028cc <HAL_UART_Transmit>
		if (cmd_flag == 1) {
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <fsm_uart_communiation+0xcc>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d10f      	bne.n	80002fa <fsm_uart_communiation+0xba>
			cmd_flag = 0;
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <fsm_uart_communiation+0xcc>)
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
			if (check_receive_OK() == 1) {
 80002e0:	f7ff ff9a 	bl	8000218 <check_receive_OK>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d107      	bne.n	80002fa <fsm_uart_communiation+0xba>
				status_communicate = WAIT_COMMAND_RST;
 80002ea:	4b07      	ldr	r3, [pc, #28]	; (8000308 <fsm_uart_communiation+0xc8>)
 80002ec:	220b      	movs	r2, #11
 80002ee:	601a      	str	r2, [r3, #0]
		break;
 80002f0:	e003      	b.n	80002fa <fsm_uart_communiation+0xba>
		break;
 80002f2:	bf00      	nop
 80002f4:	e002      	b.n	80002fc <fsm_uart_communiation+0xbc>
		break;
 80002f6:	bf00      	nop
 80002f8:	e000      	b.n	80002fc <fsm_uart_communiation+0xbc>
		break;
 80002fa:	bf00      	nop
	}
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr
 8000308:	200000c0 	.word	0x200000c0
 800030c:	200000c8 	.word	0x200000c8
 8000310:	200000c6 	.word	0x200000c6
 8000314:	2000018c 	.word	0x2000018c
 8000318:	08003604 	.word	0x08003604
 800031c:	2000007c 	.word	0x2000007c

08000320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000322:	b09b      	sub	sp, #108	; 0x6c
 8000324:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000326:	f000 fb8f 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032a:	f000 f865 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032e:	f000 f967 	bl	8000600 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000332:	f000 f8b1 	bl	8000498 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000336:	f000 f8ed 	bl	8000514 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800033a:	f000 f937 	bl	80005ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800033e:	4827      	ldr	r0, [pc, #156]	; (80003dc <main+0xbc>)
 8000340:	f001 fedc 	bl	80020fc <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 8000344:	4826      	ldr	r0, [pc, #152]	; (80003e0 <main+0xc0>)
 8000346:	f000 fcb9 	bl	8000cbc <HAL_ADC_Start>
  HAL_UART_Receive_IT (&huart2, &temp, 1);
 800034a:	2201      	movs	r2, #1
 800034c:	4925      	ldr	r1, [pc, #148]	; (80003e4 <main+0xc4>)
 800034e:	4826      	ldr	r0, [pc, #152]	; (80003e8 <main+0xc8>)
 8000350:	f002 fb3f 	bl	80029d2 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100);
 8000354:	2064      	movs	r0, #100	; 0x64
 8000356:	f000 f9a1 	bl	800069c <setTimer1>
  setTimer2(100);
 800035a:	2064      	movs	r0, #100	; 0x64
 800035c:	f000 f9ba 	bl	80006d4 <setTimer2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (timer2_flag == 1) {
 8000360:	4b22      	ldr	r3, [pc, #136]	; (80003ec <main+0xcc>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d107      	bne.n	8000378 <main+0x58>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000368:	2120      	movs	r1, #32
 800036a:	4821      	ldr	r0, [pc, #132]	; (80003f0 <main+0xd0>)
 800036c:	f001 f996 	bl	800169c <HAL_GPIO_TogglePin>
		  setTimer2(1000);
 8000370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000374:	f000 f9ae 	bl	80006d4 <setTimer2>
	  }
	  if( buffer_flag == 1) {
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <main+0xd4>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d117      	bne.n	80003b0 <main+0x90>
		  fsm_command_parser(hadc1, huart2) ;
 8000380:	4e17      	ldr	r6, [pc, #92]	; (80003e0 <main+0xc0>)
 8000382:	4a19      	ldr	r2, [pc, #100]	; (80003e8 <main+0xc8>)
 8000384:	ab08      	add	r3, sp, #32
 8000386:	4611      	mov	r1, r2
 8000388:	2248      	movs	r2, #72	; 0x48
 800038a:	4618      	mov	r0, r3
 800038c:	f002 fcd0 	bl	8002d30 <memcpy>
 8000390:	466d      	mov	r5, sp
 8000392:	f106 0410 	add.w	r4, r6, #16
 8000396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800039a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800039e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003a2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003a6:	f7ff fed1 	bl	800014c <fsm_command_parser>
		  buffer_flag = 0;
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <main+0xd4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
	  }
	  fsm_uart_communiation(hadc1, huart2) ;
 80003b0:	4e0b      	ldr	r6, [pc, #44]	; (80003e0 <main+0xc0>)
 80003b2:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <main+0xc8>)
 80003b4:	ab08      	add	r3, sp, #32
 80003b6:	4611      	mov	r1, r2
 80003b8:	2248      	movs	r2, #72	; 0x48
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 fcb8 	bl	8002d30 <memcpy>
 80003c0:	466d      	mov	r5, sp
 80003c2:	f106 0410 	add.w	r4, r6, #16
 80003c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003d6:	f7ff ff33 	bl	8000240 <fsm_uart_communiation>
	  if (timer2_flag == 1) {
 80003da:	e7c1      	b.n	8000360 <main+0x40>
 80003dc:	200000fc 	.word	0x200000fc
 80003e0:	200000cc 	.word	0x200000cc
 80003e4:	200000c5 	.word	0x200000c5
 80003e8:	20000144 	.word	0x20000144
 80003ec:	20000190 	.word	0x20000190
 80003f0:	40010800 	.word	0x40010800
 80003f4:	200000c4 	.word	0x200000c4

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b094      	sub	sp, #80	; 0x50
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f002 fc5e 	bl	8002cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000428:	2302      	movs	r3, #2
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042c:	2301      	movs	r3, #1
 800042e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000430:	2310      	movs	r3, #16
 8000432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000434:	2300      	movs	r3, #0
 8000436:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800043c:	4618      	mov	r0, r3
 800043e:	f001 f947 	bl	80016d0 <HAL_RCC_OscConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000448:	f000 f922 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044c:	230f      	movs	r3, #15
 800044e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f001 fbb4 	bl	8001bd4 <HAL_RCC_ClockConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000472:	f000 f90d 	bl	8000690 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000476:	2302      	movs	r3, #2
 8000478:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	4618      	mov	r0, r3
 8000482:	f001 fd35 	bl	8001ef0 <HAL_RCCEx_PeriphCLKConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800048c:	f000 f900 	bl	8000690 <Error_Handler>
  }
}
 8000490:	bf00      	nop
 8000492:	3750      	adds	r7, #80	; 0x50
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <MX_ADC1_Init+0x74>)
 80004aa:	4a19      	ldr	r2, [pc, #100]	; (8000510 <MX_ADC1_Init+0x78>)
 80004ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <MX_ADC1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <MX_ADC1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ba:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_ADC1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <MX_ADC1_Init+0x74>)
 80004c2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c8:	4b10      	ldr	r3, [pc, #64]	; (800050c <MX_ADC1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_ADC1_Init+0x74>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004d4:	480d      	ldr	r0, [pc, #52]	; (800050c <MX_ADC1_Init+0x74>)
 80004d6:	f000 fb19 	bl	8000b0c <HAL_ADC_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80004e0:	f000 f8d6 	bl	8000690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_ADC1_Init+0x74>)
 80004f6:	f000 fc9b 	bl	8000e30 <HAL_ADC_ConfigChannel>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000500:	f000 f8c6 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200000cc 	.word	0x200000cc
 8000510:	40012400 	.word	0x40012400

08000514 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <MX_TIM2_Init+0x94>)
 8000532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000536:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <MX_TIM2_Init+0x94>)
 800053a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800053e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000540:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_TIM2_Init+0x94>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <MX_TIM2_Init+0x94>)
 8000548:	2209      	movs	r2, #9
 800054a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054c:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <MX_TIM2_Init+0x94>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <MX_TIM2_Init+0x94>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000558:	4813      	ldr	r0, [pc, #76]	; (80005a8 <MX_TIM2_Init+0x94>)
 800055a:	f001 fd7f 	bl	800205c <HAL_TIM_Base_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000564:	f000 f894 	bl	8000690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800056c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800056e:	f107 0308 	add.w	r3, r7, #8
 8000572:	4619      	mov	r1, r3
 8000574:	480c      	ldr	r0, [pc, #48]	; (80005a8 <MX_TIM2_Init+0x94>)
 8000576:	f001 ff15 	bl	80023a4 <HAL_TIM_ConfigClockSource>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000580:	f000 f886 	bl	8000690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000584:	2300      	movs	r3, #0
 8000586:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800058c:	463b      	mov	r3, r7
 800058e:	4619      	mov	r1, r3
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_TIM2_Init+0x94>)
 8000592:	f002 f8e1 	bl	8002758 <HAL_TIMEx_MasterConfigSynchronization>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800059c:	f000 f878 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005a0:	bf00      	nop
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000fc 	.word	0x200000fc

080005ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <MX_USART2_UART_Init+0x50>)
 80005b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005d2:	220c      	movs	r2, #12
 80005d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005e4:	f002 f922 	bl	800282c <HAL_UART_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ee:	f000 f84f 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000144 	.word	0x20000144
 80005fc:	40004400 	.word	0x40004400

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_GPIO_Init+0x74>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <MX_GPIO_Init+0x74>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_GPIO_Init+0x74>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2120      	movs	r1, #32
 8000630:	4811      	ldr	r0, [pc, #68]	; (8000678 <MX_GPIO_Init+0x78>)
 8000632:	f001 f81b 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000636:	2320      	movs	r3, #32
 8000638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2302      	movs	r3, #2
 8000644:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	4619      	mov	r1, r3
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <MX_GPIO_Init+0x78>)
 800064e:	f000 fe91 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000652:	2340      	movs	r3, #64	; 0x40
 8000654:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000656:	2302      	movs	r3, #2
 8000658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	4619      	mov	r1, r3
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_GPIO_Init+0x78>)
 8000666:	f000 fe85 	bl	8001374 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066a:	bf00      	nop
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000
 8000678:	40010800 	.word	0x40010800

0800067c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	timerRun();
 8000684:	f000 f842 	bl	800070c <timerRun>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	e7fe      	b.n	8000698 <Error_Handler+0x8>
	...

0800069c <setTimer1>:
int timer2_flag = 0;

int timer1_counter = 0;
int timer2_counter = 0;

void setTimer1(int duration) {
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

	timer1_counter = duration/TIME_CYCLE;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <setTimer1+0x2c>)
 80006a8:	fb82 1203 	smull	r1, r2, r2, r3
 80006ac:	1092      	asrs	r2, r2, #2
 80006ae:	17db      	asrs	r3, r3, #31
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	4a06      	ldr	r2, [pc, #24]	; (80006cc <setTimer1+0x30>)
 80006b4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <setTimer1+0x34>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]

}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	66666667 	.word	0x66666667
 80006cc:	20000194 	.word	0x20000194
 80006d0:	2000018c 	.word	0x2000018c

080006d4 <setTimer2>:

void setTimer2(int duration) {
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

	timer2_counter = duration/TIME_CYCLE;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <setTimer2+0x2c>)
 80006e0:	fb82 1203 	smull	r1, r2, r2, r3
 80006e4:	1092      	asrs	r2, r2, #2
 80006e6:	17db      	asrs	r3, r3, #31
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	4a06      	ldr	r2, [pc, #24]	; (8000704 <setTimer2+0x30>)
 80006ec:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <setTimer2+0x34>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]

}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	66666667 	.word	0x66666667
 8000704:	20000198 	.word	0x20000198
 8000708:	20000190 	.word	0x20000190

0800070c <timerRun>:
	timer2_counter = 0;
	timer2_flag = 0;
}


void timerRun() {
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

	if (timer1_counter > 0) {
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <timerRun+0x4c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dd0b      	ble.n	8000730 <timerRun+0x24>

		timer1_counter--;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <timerRun+0x4c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3b01      	subs	r3, #1
 800071e:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <timerRun+0x4c>)
 8000720:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <timerRun+0x4c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	dc02      	bgt.n	8000730 <timerRun+0x24>

			timer1_flag = 1;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <timerRun+0x50>)
 800072c:	2201      	movs	r2, #1
 800072e:	601a      	str	r2, [r3, #0]
		}

	}

	if (timer2_counter > 0) {
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <timerRun+0x54>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	dd0b      	ble.n	8000750 <timerRun+0x44>

		timer2_counter--;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <timerRun+0x54>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	3b01      	subs	r3, #1
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <timerRun+0x54>)
 8000740:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <timerRun+0x54>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	dc02      	bgt.n	8000750 <timerRun+0x44>

			timer2_flag = 1;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <timerRun+0x58>)
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
		}

	}

}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	20000194 	.word	0x20000194
 800075c:	2000018c 	.word	0x2000018c
 8000760:	20000198 	.word	0x20000198
 8000764:	20000190 	.word	0x20000190

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_MspInit+0x5c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <HAL_MspInit+0x5c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_MspInit+0x5c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x5c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_MspInit+0x5c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x5c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_MspInit+0x60>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_MspInit+0x60>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010000 	.word	0x40010000

080007cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a14      	ldr	r2, [pc, #80]	; (8000838 <HAL_ADC_MspInit+0x6c>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d121      	bne.n	8000830 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <HAL_ADC_MspInit+0x70>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a12      	ldr	r2, [pc, #72]	; (800083c <HAL_ADC_MspInit+0x70>)
 80007f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <HAL_ADC_MspInit+0x70>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <HAL_ADC_MspInit+0x70>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a0c      	ldr	r2, [pc, #48]	; (800083c <HAL_ADC_MspInit+0x70>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_ADC_MspInit+0x70>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800081c:	2301      	movs	r3, #1
 800081e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000820:	2303      	movs	r3, #3
 8000822:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <HAL_ADC_MspInit+0x74>)
 800082c:	f000 fda2 	bl	8001374 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40012400 	.word	0x40012400
 800083c:	40021000 	.word	0x40021000
 8000840:	40010800 	.word	0x40010800

08000844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000854:	d113      	bne.n	800087e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_TIM_Base_MspInit+0x44>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <HAL_TIM_Base_MspInit+0x44>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_TIM_Base_MspInit+0x44>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	201c      	movs	r0, #28
 8000874:	f000 fd47 	bl	8001306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000878:	201c      	movs	r0, #28
 800087a:	f000 fd60 	bl	800133e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d12f      	bne.n	800090c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <HAL_UART_MspInit+0x8c>)
 80008ae:	69db      	ldr	r3, [r3, #28]
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <HAL_UART_MspInit+0x8c>)
 80008b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b6:	61d3      	str	r3, [r2, #28]
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_UART_MspInit+0x8c>)
 80008ba:	69db      	ldr	r3, [r3, #28]
 80008bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_UART_MspInit+0x8c>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <HAL_UART_MspInit+0x8c>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_UART_MspInit+0x8c>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008dc:	2304      	movs	r3, #4
 80008de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	480b      	ldr	r0, [pc, #44]	; (800091c <HAL_UART_MspInit+0x90>)
 80008f0:	f000 fd40 	bl	8001374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008f4:	2308      	movs	r3, #8
 80008f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <HAL_UART_MspInit+0x90>)
 8000908:	f000 fd34 	bl	8001374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40004400 	.word	0x40004400
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000966:	f000 f8b5 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <TIM2_IRQHandler+0x10>)
 8000976:	f001 fc0d 	bl	8002194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000fc 	.word	0x200000fc

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f002 f990 	bl	8002cd8 <__errno>
 80009b8:	4603      	mov	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20002800 	.word	0x20002800
 80009e4:	00000400 	.word	0x00000400
 80009e8:	2000019c 	.word	0x2000019c
 80009ec:	200002f0 	.word	0x200002f0

080009f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009fc:	f7ff fff8 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a02:	490c      	ldr	r1, [pc, #48]	; (8000a34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a04:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a18:	4c09      	ldr	r4, [pc, #36]	; (8000a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a26:	f002 f95d 	bl	8002ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2a:	f7ff fc79 	bl	8000320 <main>
  bx lr
 8000a2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a38:	08003678 	.word	0x08003678
  ldr r2, =_sbss
 8000a3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a40:	200002ec 	.word	0x200002ec

08000a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_2_IRQHandler>
	...

08000a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_Init+0x28>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_Init+0x28>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 fc49 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	200f      	movs	r0, #15
 8000a60:	f000 f808 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a64:	f7ff fe80 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40022000 	.word	0x40022000

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x54>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x58>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fc61 	bl	800135a <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00e      	b.n	8000ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d80a      	bhi.n	8000abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f000 fc29 	bl	8001306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <HAL_InitTick+0x5c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_IncTick+0x1c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_IncTick+0x20>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a03      	ldr	r2, [pc, #12]	; (8000af4 <HAL_IncTick+0x20>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	20000008 	.word	0x20000008
 8000af4:	200001a0 	.word	0x200001a0

08000af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b02      	ldr	r3, [pc, #8]	; (8000b08 <HAL_GetTick+0x10>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	200001a0 	.word	0x200001a0

08000b0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e0be      	b.n	8000cac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d109      	bne.n	8000b50 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fe3e 	bl	80007cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 fabf 	bl	80010d4 <ADC_ConversionStop_Disable>
 8000b56:	4603      	mov	r3, r0
 8000b58:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f040 8099 	bne.w	8000c9a <HAL_ADC_Init+0x18e>
 8000b68:	7dfb      	ldrb	r3, [r7, #23]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f040 8095 	bne.w	8000c9a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b78:	f023 0302 	bic.w	r3, r3, #2
 8000b7c:	f043 0202 	orr.w	r2, r3, #2
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b8c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7b1b      	ldrb	r3, [r3, #12]
 8000b92:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b94:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ba4:	d003      	beq.n	8000bae <HAL_ADC_Init+0xa2>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d102      	bne.n	8000bb4 <HAL_ADC_Init+0xa8>
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	e000      	b.n	8000bb6 <HAL_ADC_Init+0xaa>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	7d1b      	ldrb	r3, [r3, #20]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d119      	bne.n	8000bf8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7b1b      	ldrb	r3, [r3, #12]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d109      	bne.n	8000be0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	035a      	lsls	r2, r3, #13
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	e00b      	b.n	8000bf8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be4:	f043 0220 	orr.w	r2, r3, #32
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf0:	f043 0201 	orr.w	r2, r3, #1
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <HAL_ADC_Init+0x1a8>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	6812      	ldr	r2, [r2, #0]
 8000c1a:	68b9      	ldr	r1, [r7, #8]
 8000c1c:	430b      	orrs	r3, r1
 8000c1e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c28:	d003      	beq.n	8000c32 <HAL_ADC_Init+0x126>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d104      	bne.n	8000c3c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	051b      	lsls	r3, r3, #20
 8000c3a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c42:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_ADC_Init+0x1ac>)
 8000c58:	4013      	ands	r3, r2
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d10b      	bne.n	8000c78 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6a:	f023 0303 	bic.w	r3, r3, #3
 8000c6e:	f043 0201 	orr.w	r2, r3, #1
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c76:	e018      	b.n	8000caa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7c:	f023 0312 	bic.w	r3, r3, #18
 8000c80:	f043 0210 	orr.w	r2, r3, #16
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8c:	f043 0201 	orr.w	r2, r3, #1
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c98:	e007      	b.n	8000caa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9e:	f043 0210 	orr.w	r2, r3, #16
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	ffe1f7fd 	.word	0xffe1f7fd
 8000cb8:	ff1f0efe 	.word	0xff1f0efe

08000cbc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d101      	bne.n	8000cd6 <HAL_ADC_Start+0x1a>
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	e098      	b.n	8000e08 <HAL_ADC_Start+0x14c>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 f99e 	bl	8001020 <ADC_Enable>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 8087 	bne.w	8000dfe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cf8:	f023 0301 	bic.w	r3, r3, #1
 8000cfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a41      	ldr	r2, [pc, #260]	; (8000e10 <HAL_ADC_Start+0x154>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d105      	bne.n	8000d1a <HAL_ADC_Start+0x5e>
 8000d0e:	4b41      	ldr	r3, [pc, #260]	; (8000e14 <HAL_ADC_Start+0x158>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d115      	bne.n	8000d46 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d026      	beq.n	8000d82 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d44:	e01d      	b.n	8000d82 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a2f      	ldr	r2, [pc, #188]	; (8000e14 <HAL_ADC_Start+0x158>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d004      	beq.n	8000d66 <HAL_ADC_Start+0xaa>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a2b      	ldr	r2, [pc, #172]	; (8000e10 <HAL_ADC_Start+0x154>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d10d      	bne.n	8000d82 <HAL_ADC_Start+0xc6>
 8000d66:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <HAL_ADC_Start+0x158>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d006      	beq.n	8000d9c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d92:	f023 0206 	bic.w	r2, r3, #6
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d9a:	e002      	b.n	8000da2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f06f 0202 	mvn.w	r2, #2
 8000db2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000dbe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dc2:	d113      	bne.n	8000dec <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dc8:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <HAL_ADC_Start+0x154>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d105      	bne.n	8000dda <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_ADC_Start+0x158>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d108      	bne.n	8000dec <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	e00c      	b.n	8000e06 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	e003      	b.n	8000e06 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40012800 	.word	0x40012800
 8000e14:	40012400 	.word	0x40012400

08000e18 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d101      	bne.n	8000e50 <HAL_ADC_ConfigChannel+0x20>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e0dc      	b.n	800100a <HAL_ADC_ConfigChannel+0x1da>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b06      	cmp	r3, #6
 8000e5e:	d81c      	bhi.n	8000e9a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	3b05      	subs	r3, #5
 8000e72:	221f      	movs	r2, #31
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4019      	ands	r1, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	3b05      	subs	r3, #5
 8000e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
 8000e98:	e03c      	b.n	8000f14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b0c      	cmp	r3, #12
 8000ea0:	d81c      	bhi.n	8000edc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	3b23      	subs	r3, #35	; 0x23
 8000eb4:	221f      	movs	r2, #31
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	4019      	ands	r1, r3
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	3b23      	subs	r3, #35	; 0x23
 8000ece:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8000eda:	e01b      	b.n	8000f14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	3b41      	subs	r3, #65	; 0x41
 8000eee:	221f      	movs	r2, #31
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	4019      	ands	r1, r3
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	3b41      	subs	r3, #65	; 0x41
 8000f08:	fa00 f203 	lsl.w	r2, r0, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	430a      	orrs	r2, r1
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b09      	cmp	r3, #9
 8000f1a:	d91c      	bls.n	8000f56 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68d9      	ldr	r1, [r3, #12]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4613      	mov	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3b1e      	subs	r3, #30
 8000f2e:	2207      	movs	r2, #7
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4019      	ands	r1, r3
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	6898      	ldr	r0, [r3, #8]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	3b1e      	subs	r3, #30
 8000f48:	fa00 f203 	lsl.w	r2, r0, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	e019      	b.n	8000f8a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6919      	ldr	r1, [r3, #16]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	2207      	movs	r2, #7
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4019      	ands	r1, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	6898      	ldr	r0, [r3, #8]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d003      	beq.n	8000f9a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f96:	2b11      	cmp	r3, #17
 8000f98:	d132      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <HAL_ADC_ConfigChannel+0x1e4>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d125      	bne.n	8000ff0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d126      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000fc0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b10      	cmp	r3, #16
 8000fc8:	d11a      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_ADC_ConfigChannel+0x1e8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <HAL_ADC_ConfigChannel+0x1ec>)
 8000fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd4:	0c9a      	lsrs	r2, r3, #18
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fe0:	e002      	b.n	8000fe8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f9      	bne.n	8000fe2 <HAL_ADC_ConfigChannel+0x1b2>
 8000fee:	e007      	b.n	8001000 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff4:	f043 0220 	orr.w	r2, r3, #32
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	40012400 	.word	0x40012400
 8001018:	20000000 	.word	0x20000000
 800101c:	431bde83 	.word	0x431bde83

08001020 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b01      	cmp	r3, #1
 800103c:	d040      	beq.n	80010c0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0201 	orr.w	r2, r2, #1
 800104c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <ADC_Enable+0xac>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a1f      	ldr	r2, [pc, #124]	; (80010d0 <ADC_Enable+0xb0>)
 8001054:	fba2 2303 	umull	r2, r3, r2, r3
 8001058:	0c9b      	lsrs	r3, r3, #18
 800105a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800105c:	e002      	b.n	8001064 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	3b01      	subs	r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f9      	bne.n	800105e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800106a:	f7ff fd45 	bl	8000af8 <HAL_GetTick>
 800106e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001070:	e01f      	b.n	80010b2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001072:	f7ff fd41 	bl	8000af8 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d918      	bls.n	80010b2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b01      	cmp	r3, #1
 800108c:	d011      	beq.n	80010b2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	f043 0210 	orr.w	r2, r3, #16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	f043 0201 	orr.w	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e007      	b.n	80010c2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d1d8      	bne.n	8001072 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000000 	.word	0x20000000
 80010d0:	431bde83 	.word	0x431bde83

080010d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d12e      	bne.n	800114c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0201 	bic.w	r2, r2, #1
 80010fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010fe:	f7ff fcfb 	bl	8000af8 <HAL_GetTick>
 8001102:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001104:	e01b      	b.n	800113e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001106:	f7ff fcf7 	bl	8000af8 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d914      	bls.n	800113e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b01      	cmp	r3, #1
 8001120:	d10d      	bne.n	800113e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	f043 0210 	orr.w	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	f043 0201 	orr.w	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e007      	b.n	800114e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b01      	cmp	r3, #1
 800114a:	d0dc      	beq.n	8001106 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4906      	ldr	r1, [pc, #24]	; (80011f0 <__NVIC_EnableIRQ+0x34>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	; (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012bc:	d301      	bcc.n	80012c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012be:	2301      	movs	r3, #1
 80012c0:	e00f      	b.n	80012e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <SysTick_Config+0x40>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ca:	210f      	movs	r1, #15
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f7ff ff90 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <SysTick_Config+0x40>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <SysTick_Config+0x40>)
 80012dc:	2207      	movs	r2, #7
 80012de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	e000e010 	.word	0xe000e010

080012f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff2d 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff42 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff90 	bl	8001248 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5f 	bl	80011f4 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff35 	bl	80011bc <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffa2 	bl	80012ac <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001374:	b480      	push	{r7}
 8001376:	b08b      	sub	sp, #44	; 0x2c
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001386:	e161      	b.n	800164c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001388:	2201      	movs	r2, #1
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	f040 8150 	bne.w	8001646 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	4a97      	ldr	r2, [pc, #604]	; (8001608 <HAL_GPIO_Init+0x294>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d05e      	beq.n	800146e <HAL_GPIO_Init+0xfa>
 80013b0:	4a95      	ldr	r2, [pc, #596]	; (8001608 <HAL_GPIO_Init+0x294>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d875      	bhi.n	80014a2 <HAL_GPIO_Init+0x12e>
 80013b6:	4a95      	ldr	r2, [pc, #596]	; (800160c <HAL_GPIO_Init+0x298>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d058      	beq.n	800146e <HAL_GPIO_Init+0xfa>
 80013bc:	4a93      	ldr	r2, [pc, #588]	; (800160c <HAL_GPIO_Init+0x298>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d86f      	bhi.n	80014a2 <HAL_GPIO_Init+0x12e>
 80013c2:	4a93      	ldr	r2, [pc, #588]	; (8001610 <HAL_GPIO_Init+0x29c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d052      	beq.n	800146e <HAL_GPIO_Init+0xfa>
 80013c8:	4a91      	ldr	r2, [pc, #580]	; (8001610 <HAL_GPIO_Init+0x29c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d869      	bhi.n	80014a2 <HAL_GPIO_Init+0x12e>
 80013ce:	4a91      	ldr	r2, [pc, #580]	; (8001614 <HAL_GPIO_Init+0x2a0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d04c      	beq.n	800146e <HAL_GPIO_Init+0xfa>
 80013d4:	4a8f      	ldr	r2, [pc, #572]	; (8001614 <HAL_GPIO_Init+0x2a0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d863      	bhi.n	80014a2 <HAL_GPIO_Init+0x12e>
 80013da:	4a8f      	ldr	r2, [pc, #572]	; (8001618 <HAL_GPIO_Init+0x2a4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d046      	beq.n	800146e <HAL_GPIO_Init+0xfa>
 80013e0:	4a8d      	ldr	r2, [pc, #564]	; (8001618 <HAL_GPIO_Init+0x2a4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d85d      	bhi.n	80014a2 <HAL_GPIO_Init+0x12e>
 80013e6:	2b12      	cmp	r3, #18
 80013e8:	d82a      	bhi.n	8001440 <HAL_GPIO_Init+0xcc>
 80013ea:	2b12      	cmp	r3, #18
 80013ec:	d859      	bhi.n	80014a2 <HAL_GPIO_Init+0x12e>
 80013ee:	a201      	add	r2, pc, #4	; (adr r2, 80013f4 <HAL_GPIO_Init+0x80>)
 80013f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f4:	0800146f 	.word	0x0800146f
 80013f8:	08001449 	.word	0x08001449
 80013fc:	0800145b 	.word	0x0800145b
 8001400:	0800149d 	.word	0x0800149d
 8001404:	080014a3 	.word	0x080014a3
 8001408:	080014a3 	.word	0x080014a3
 800140c:	080014a3 	.word	0x080014a3
 8001410:	080014a3 	.word	0x080014a3
 8001414:	080014a3 	.word	0x080014a3
 8001418:	080014a3 	.word	0x080014a3
 800141c:	080014a3 	.word	0x080014a3
 8001420:	080014a3 	.word	0x080014a3
 8001424:	080014a3 	.word	0x080014a3
 8001428:	080014a3 	.word	0x080014a3
 800142c:	080014a3 	.word	0x080014a3
 8001430:	080014a3 	.word	0x080014a3
 8001434:	080014a3 	.word	0x080014a3
 8001438:	08001451 	.word	0x08001451
 800143c:	08001465 	.word	0x08001465
 8001440:	4a76      	ldr	r2, [pc, #472]	; (800161c <HAL_GPIO_Init+0x2a8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001446:	e02c      	b.n	80014a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e029      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	3304      	adds	r3, #4
 8001456:	623b      	str	r3, [r7, #32]
          break;
 8001458:	e024      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	3308      	adds	r3, #8
 8001460:	623b      	str	r3, [r7, #32]
          break;
 8001462:	e01f      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	330c      	adds	r3, #12
 800146a:	623b      	str	r3, [r7, #32]
          break;
 800146c:	e01a      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001476:	2304      	movs	r3, #4
 8001478:	623b      	str	r3, [r7, #32]
          break;
 800147a:	e013      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d105      	bne.n	8001490 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001484:	2308      	movs	r3, #8
 8001486:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	611a      	str	r2, [r3, #16]
          break;
 800148e:	e009      	b.n	80014a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001490:	2308      	movs	r3, #8
 8001492:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	615a      	str	r2, [r3, #20]
          break;
 800149a:	e003      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
          break;
 80014a0:	e000      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          break;
 80014a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2bff      	cmp	r3, #255	; 0xff
 80014a8:	d801      	bhi.n	80014ae <HAL_GPIO_Init+0x13a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	e001      	b.n	80014b2 <HAL_GPIO_Init+0x13e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3304      	adds	r3, #4
 80014b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2bff      	cmp	r3, #255	; 0xff
 80014b8:	d802      	bhi.n	80014c0 <HAL_GPIO_Init+0x14c>
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	e002      	b.n	80014c6 <HAL_GPIO_Init+0x152>
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	3b08      	subs	r3, #8
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	210f      	movs	r1, #15
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	401a      	ands	r2, r3
 80014d8:	6a39      	ldr	r1, [r7, #32]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	431a      	orrs	r2, r3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80a9 	beq.w	8001646 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014f4:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <HAL_GPIO_Init+0x2ac>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a49      	ldr	r2, [pc, #292]	; (8001620 <HAL_GPIO_Init+0x2ac>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_GPIO_Init+0x2ac>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800150c:	4a45      	ldr	r2, [pc, #276]	; (8001624 <HAL_GPIO_Init+0x2b0>)
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001518:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4013      	ands	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3d      	ldr	r2, [pc, #244]	; (8001628 <HAL_GPIO_Init+0x2b4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d00d      	beq.n	8001554 <HAL_GPIO_Init+0x1e0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a3c      	ldr	r2, [pc, #240]	; (800162c <HAL_GPIO_Init+0x2b8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d007      	beq.n	8001550 <HAL_GPIO_Init+0x1dc>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a3b      	ldr	r2, [pc, #236]	; (8001630 <HAL_GPIO_Init+0x2bc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_GPIO_Init+0x1d8>
 8001548:	2302      	movs	r3, #2
 800154a:	e004      	b.n	8001556 <HAL_GPIO_Init+0x1e2>
 800154c:	2303      	movs	r3, #3
 800154e:	e002      	b.n	8001556 <HAL_GPIO_Init+0x1e2>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_GPIO_Init+0x1e2>
 8001554:	2300      	movs	r3, #0
 8001556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001558:	f002 0203 	and.w	r2, r2, #3
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	4093      	lsls	r3, r2
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001566:	492f      	ldr	r1, [pc, #188]	; (8001624 <HAL_GPIO_Init+0x2b0>)
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001580:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	492b      	ldr	r1, [pc, #172]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	608b      	str	r3, [r1, #8]
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800158e:	4b29      	ldr	r3, [pc, #164]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	43db      	mvns	r3, r3
 8001596:	4927      	ldr	r1, [pc, #156]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 8001598:	4013      	ands	r3, r2
 800159a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	4921      	ldr	r1, [pc, #132]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	60cb      	str	r3, [r1, #12]
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	43db      	mvns	r3, r3
 80015be:	491d      	ldr	r1, [pc, #116]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4917      	ldr	r1, [pc, #92]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
 80015dc:	e006      	b.n	80015ec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4913      	ldr	r1, [pc, #76]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d01f      	beq.n	8001638 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	490d      	ldr	r1, [pc, #52]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	600b      	str	r3, [r1, #0]
 8001604:	e01f      	b.n	8001646 <HAL_GPIO_Init+0x2d2>
 8001606:	bf00      	nop
 8001608:	10320000 	.word	0x10320000
 800160c:	10310000 	.word	0x10310000
 8001610:	10220000 	.word	0x10220000
 8001614:	10210000 	.word	0x10210000
 8001618:	10120000 	.word	0x10120000
 800161c:	10110000 	.word	0x10110000
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000
 8001628:	40010800 	.word	0x40010800
 800162c:	40010c00 	.word	0x40010c00
 8001630:	40011000 	.word	0x40011000
 8001634:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_GPIO_Init+0x2f4>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	43db      	mvns	r3, r3
 8001640:	4909      	ldr	r1, [pc, #36]	; (8001668 <HAL_GPIO_Init+0x2f4>)
 8001642:	4013      	ands	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	3301      	adds	r3, #1
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	fa22 f303 	lsr.w	r3, r2, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	f47f ae96 	bne.w	8001388 <HAL_GPIO_Init+0x14>
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	372c      	adds	r7, #44	; 0x2c
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	40010400 	.word	0x40010400

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001688:	e003      	b.n	8001692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	041a      	lsls	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	611a      	str	r2, [r3, #16]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	041a      	lsls	r2, r3, #16
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43d9      	mvns	r1, r3
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	400b      	ands	r3, r1
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	611a      	str	r2, [r3, #16]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e272      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8087 	beq.w	80017fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f0:	4b92      	ldr	r3, [pc, #584]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d00c      	beq.n	8001716 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016fc:	4b8f      	ldr	r3, [pc, #572]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b08      	cmp	r3, #8
 8001706:	d112      	bne.n	800172e <HAL_RCC_OscConfig+0x5e>
 8001708:	4b8c      	ldr	r3, [pc, #560]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001714:	d10b      	bne.n	800172e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001716:	4b89      	ldr	r3, [pc, #548]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d06c      	beq.n	80017fc <HAL_RCC_OscConfig+0x12c>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d168      	bne.n	80017fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e24c      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x76>
 8001738:	4b80      	ldr	r3, [pc, #512]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a7f      	ldr	r2, [pc, #508]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800173e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e02e      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x98>
 800174e:	4b7b      	ldr	r3, [pc, #492]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7a      	ldr	r2, [pc, #488]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b78      	ldr	r3, [pc, #480]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a77      	ldr	r2, [pc, #476]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e01d      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0xbc>
 8001772:	4b72      	ldr	r3, [pc, #456]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a71      	ldr	r2, [pc, #452]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b6f      	ldr	r3, [pc, #444]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6e      	ldr	r2, [pc, #440]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 800178c:	4b6b      	ldr	r3, [pc, #428]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a6a      	ldr	r2, [pc, #424]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b68      	ldr	r3, [pc, #416]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a67      	ldr	r2, [pc, #412]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff f9a4 	bl	8000af8 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff f9a0 	bl	8000af8 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e200      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b5d      	ldr	r3, [pc, #372]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0xe4>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff f990 	bl	8000af8 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff f98c 	bl	8000af8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1ec      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x10c>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d063      	beq.n	80018d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800180a:	4b4c      	ldr	r3, [pc, #304]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	d11c      	bne.n	800185c <HAL_RCC_OscConfig+0x18c>
 8001822:	4b46      	ldr	r3, [pc, #280]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d116      	bne.n	800185c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182e:	4b43      	ldr	r3, [pc, #268]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_RCC_OscConfig+0x176>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e1c0      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4939      	ldr	r1, [pc, #228]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	e03a      	b.n	80018d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001864:	4b36      	ldr	r3, [pc, #216]	; (8001940 <HAL_RCC_OscConfig+0x270>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff f945 	bl	8000af8 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff f941 	bl	8000af8 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e1a1      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4927      	ldr	r1, [pc, #156]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_RCC_OscConfig+0x270>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff f924 	bl	8000af8 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff f920 	bl	8000af8 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e180      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d03a      	beq.n	8001954 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d019      	beq.n	800191a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_RCC_OscConfig+0x274>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ec:	f7ff f904 	bl	8000af8 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f4:	f7ff f900 	bl	8000af8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e160      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_RCC_OscConfig+0x26c>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001912:	2001      	movs	r0, #1
 8001914:	f000 face 	bl	8001eb4 <RCC_Delay>
 8001918:	e01c      	b.n	8001954 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_RCC_OscConfig+0x274>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001920:	f7ff f8ea 	bl	8000af8 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001926:	e00f      	b.n	8001948 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001928:	f7ff f8e6 	bl	8000af8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d908      	bls.n	8001948 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e146      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	42420000 	.word	0x42420000
 8001944:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	4b92      	ldr	r3, [pc, #584]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e9      	bne.n	8001928 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80a6 	beq.w	8001aae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001966:	4b8b      	ldr	r3, [pc, #556]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10d      	bne.n	800198e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a87      	ldr	r2, [pc, #540]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b85      	ldr	r3, [pc, #532]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	4b82      	ldr	r3, [pc, #520]	; (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d118      	bne.n	80019cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199a:	4b7f      	ldr	r3, [pc, #508]	; (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a7e      	ldr	r2, [pc, #504]	; (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a6:	f7ff f8a7 	bl	8000af8 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ae:	f7ff f8a3 	bl	8000af8 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b64      	cmp	r3, #100	; 0x64
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e103      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	4b75      	ldr	r3, [pc, #468]	; (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x312>
 80019d4:	4b6f      	ldr	r3, [pc, #444]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a6e      	ldr	r2, [pc, #440]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6213      	str	r3, [r2, #32]
 80019e0:	e02d      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x334>
 80019ea:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a69      	ldr	r2, [pc, #420]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a66      	ldr	r2, [pc, #408]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	e01c      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d10c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x356>
 8001a0c:	4b61      	ldr	r3, [pc, #388]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4a60      	ldr	r2, [pc, #384]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	4b5e      	ldr	r3, [pc, #376]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a5d      	ldr	r2, [pc, #372]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	e00b      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 8001a26:	4b5b      	ldr	r3, [pc, #364]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a5a      	ldr	r2, [pc, #360]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a57      	ldr	r2, [pc, #348]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f023 0304 	bic.w	r3, r3, #4
 8001a3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d015      	beq.n	8001a72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a46:	f7ff f857 	bl	8000af8 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff f853 	bl	8000af8 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0b1      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	4b4b      	ldr	r3, [pc, #300]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ee      	beq.n	8001a4e <HAL_RCC_OscConfig+0x37e>
 8001a70:	e014      	b.n	8001a9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7ff f841 	bl	8000af8 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff f83d 	bl	8000af8 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e09b      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a90:	4b40      	ldr	r3, [pc, #256]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1ee      	bne.n	8001a7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d105      	bne.n	8001aae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a3b      	ldr	r2, [pc, #236]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8087 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab8:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d061      	beq.n	8001b88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d146      	bne.n	8001b5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b33      	ldr	r3, [pc, #204]	; (8001b9c <HAL_RCC_OscConfig+0x4cc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f811 	bl	8000af8 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff f80d 	bl	8000af8 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e06d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aec:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b00:	d108      	bne.n	8001b14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b02:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4921      	ldr	r1, [pc, #132]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a19      	ldr	r1, [r3, #32]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	430b      	orrs	r3, r1
 8001b26:	491b      	ldr	r1, [pc, #108]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_RCC_OscConfig+0x4cc>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe ffe1 	bl	8000af8 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7fe ffdd 	bl	8000af8 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e03d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x46a>
 8001b58:	e035      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_RCC_OscConfig+0x4cc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7fe ffca 	bl	8000af8 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7fe ffc6 	bl	8000af8 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e026      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x498>
 8001b86:	e01e      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e019      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_OscConfig+0x500>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0d0      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d910      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 0207 	bic.w	r2, r3, #7
 8001bfe:	4965      	ldr	r1, [pc, #404]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b63      	ldr	r3, [pc, #396]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0b8      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c30:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4a58      	ldr	r2, [pc, #352]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c48:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a52      	ldr	r2, [pc, #328]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b50      	ldr	r3, [pc, #320]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	494d      	ldr	r1, [pc, #308]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d040      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d115      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e07f      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	4b41      	ldr	r3, [pc, #260]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e073      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e06b      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb2:	4b39      	ldr	r3, [pc, #228]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f023 0203 	bic.w	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4936      	ldr	r1, [pc, #216]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc4:	f7fe ff18 	bl	8000af8 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ccc:	f7fe ff14 	bl	8000af8 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e053      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 020c 	and.w	r2, r3, #12
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1eb      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d210      	bcs.n	8001d24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	4922      	ldr	r1, [pc, #136]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e032      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4916      	ldr	r1, [pc, #88]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	490e      	ldr	r1, [pc, #56]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d62:	f000 f821 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8001d66:	4602      	mov	r2, r0
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	490a      	ldr	r1, [pc, #40]	; (8001d9c <HAL_RCC_ClockConfig+0x1c8>)
 8001d74:	5ccb      	ldrb	r3, [r1, r3]
 8001d76:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7a:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <HAL_RCC_ClockConfig+0x1cc>)
 8001d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_RCC_ClockConfig+0x1d0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fe76 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08003610 	.word	0x08003610
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d002      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x30>
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d003      	beq.n	8001dde <HAL_RCC_GetSysClockFreq+0x36>
 8001dd6:	e027      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dda:	613b      	str	r3, [r7, #16]
      break;
 8001ddc:	e027      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	0c9b      	lsrs	r3, r3, #18
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001de8:	5cd3      	ldrb	r3, [r2, r3]
 8001dea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d010      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0c5b      	lsrs	r3, r3, #17
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e02:	5cd3      	ldrb	r3, [r2, r3]
 8001e04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0a:	fb03 f202 	mul.w	r2, r3, r2
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	e004      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	613b      	str	r3, [r7, #16]
      break;
 8001e26:	e002      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e2a:	613b      	str	r3, [r7, #16]
      break;
 8001e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e2e:	693b      	ldr	r3, [r7, #16]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	007a1200 	.word	0x007a1200
 8001e44:	08003628 	.word	0x08003628
 8001e48:	08003638 	.word	0x08003638
 8001e4c:	003d0900 	.word	0x003d0900

08001e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e54:	4b02      	ldr	r3, [pc, #8]	; (8001e60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000000 	.word	0x20000000

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e68:	f7ff fff2 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08003620 	.word	0x08003620

08001e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e90:	f7ff ffde 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	0adb      	lsrs	r3, r3, #11
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4903      	ldr	r1, [pc, #12]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08003620 	.word	0x08003620

08001eb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <RCC_Delay+0x34>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <RCC_Delay+0x38>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0a5b      	lsrs	r3, r3, #9
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ed0:	bf00      	nop
  }
  while (Delay --);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1e5a      	subs	r2, r3, #1
 8001ed6:	60fa      	str	r2, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f9      	bne.n	8001ed0 <RCC_Delay+0x1c>
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	10624dd3 	.word	0x10624dd3

08001ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d07d      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f10:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10d      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	4a4b      	ldr	r2, [pc, #300]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f26:	61d3      	str	r3, [r2, #28]
 8001f28:	4b49      	ldr	r3, [pc, #292]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f34:	2301      	movs	r3, #1
 8001f36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b46      	ldr	r3, [pc, #280]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d118      	bne.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f44:	4b43      	ldr	r3, [pc, #268]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a42      	ldr	r2, [pc, #264]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f50:	f7fe fdd2 	bl	8000af8 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	e008      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f58:	f7fe fdce 	bl	8000af8 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e06d      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f76:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d02e      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d027      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001faa:	4a29      	ldr	r2, [pc, #164]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d014      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe fd9d 	bl	8000af8 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7fe fd99 	bl	8000af8 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e036      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ee      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4917      	ldr	r1, [pc, #92]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	4a13      	ldr	r2, [pc, #76]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002006:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	490b      	ldr	r1, [pc, #44]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b00      	cmp	r3, #0
 8002030:	d008      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4904      	ldr	r1, [pc, #16]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	40007000 	.word	0x40007000
 8002058:	42420440 	.word	0x42420440

0800205c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e041      	b.n	80020f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fbde 	bl	8000844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3304      	adds	r3, #4
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f000 fa6e 	bl	800257c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d001      	beq.n	8002114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e035      	b.n	8002180 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_TIM_Base_Start_IT+0x90>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d009      	beq.n	800214a <HAL_TIM_Base_Start_IT+0x4e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213e:	d004      	beq.n	800214a <HAL_TIM_Base_Start_IT+0x4e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a12      	ldr	r2, [pc, #72]	; (8002190 <HAL_TIM_Base_Start_IT+0x94>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d111      	bne.n	800216e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b06      	cmp	r3, #6
 800215a:	d010      	beq.n	800217e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800216c:	e007      	b.n	800217e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40012c00 	.word	0x40012c00
 8002190:	40000400 	.word	0x40000400

08002194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d122      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d11b      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0202 	mvn.w	r2, #2
 80021c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f9b4 	bl	8002544 <HAL_TIM_IC_CaptureCallback>
 80021dc:	e005      	b.n	80021ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f9a7 	bl	8002532 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f9b6 	bl	8002556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d122      	bne.n	8002244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b04      	cmp	r3, #4
 800220a:	d11b      	bne.n	8002244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0204 	mvn.w	r2, #4
 8002214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f98a 	bl	8002544 <HAL_TIM_IC_CaptureCallback>
 8002230:	e005      	b.n	800223e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f97d 	bl	8002532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f98c 	bl	8002556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b08      	cmp	r3, #8
 8002250:	d122      	bne.n	8002298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b08      	cmp	r3, #8
 800225e:	d11b      	bne.n	8002298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0208 	mvn.w	r2, #8
 8002268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2204      	movs	r2, #4
 800226e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f960 	bl	8002544 <HAL_TIM_IC_CaptureCallback>
 8002284:	e005      	b.n	8002292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f953 	bl	8002532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f962 	bl	8002556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d122      	bne.n	80022ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d11b      	bne.n	80022ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0210 	mvn.w	r2, #16
 80022bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2208      	movs	r2, #8
 80022c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f936 	bl	8002544 <HAL_TIM_IC_CaptureCallback>
 80022d8:	e005      	b.n	80022e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f929 	bl	8002532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f938 	bl	8002556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d10e      	bne.n	8002318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0201 	mvn.w	r2, #1
 8002310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe f9b2 	bl	800067c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002322:	2b80      	cmp	r3, #128	; 0x80
 8002324:	d10e      	bne.n	8002344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d107      	bne.n	8002344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800233c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fa6b 	bl	800281a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d10e      	bne.n	8002370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235c:	2b40      	cmp	r3, #64	; 0x40
 800235e:	d107      	bne.n	8002370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f8fc 	bl	8002568 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b20      	cmp	r3, #32
 800237c:	d10e      	bne.n	800239c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b20      	cmp	r3, #32
 800238a:	d107      	bne.n	800239c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0220 	mvn.w	r2, #32
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fa36 	bl	8002808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_TIM_ConfigClockSource+0x1c>
 80023bc:	2302      	movs	r3, #2
 80023be:	e0b4      	b.n	800252a <HAL_TIM_ConfigClockSource+0x186>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f8:	d03e      	beq.n	8002478 <HAL_TIM_ConfigClockSource+0xd4>
 80023fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fe:	f200 8087 	bhi.w	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002406:	f000 8086 	beq.w	8002516 <HAL_TIM_ConfigClockSource+0x172>
 800240a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240e:	d87f      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002410:	2b70      	cmp	r3, #112	; 0x70
 8002412:	d01a      	beq.n	800244a <HAL_TIM_ConfigClockSource+0xa6>
 8002414:	2b70      	cmp	r3, #112	; 0x70
 8002416:	d87b      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002418:	2b60      	cmp	r3, #96	; 0x60
 800241a:	d050      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x11a>
 800241c:	2b60      	cmp	r3, #96	; 0x60
 800241e:	d877      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002420:	2b50      	cmp	r3, #80	; 0x50
 8002422:	d03c      	beq.n	800249e <HAL_TIM_ConfigClockSource+0xfa>
 8002424:	2b50      	cmp	r3, #80	; 0x50
 8002426:	d873      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d058      	beq.n	80024de <HAL_TIM_ConfigClockSource+0x13a>
 800242c:	2b40      	cmp	r3, #64	; 0x40
 800242e:	d86f      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002430:	2b30      	cmp	r3, #48	; 0x30
 8002432:	d064      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x15a>
 8002434:	2b30      	cmp	r3, #48	; 0x30
 8002436:	d86b      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002438:	2b20      	cmp	r3, #32
 800243a:	d060      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x15a>
 800243c:	2b20      	cmp	r3, #32
 800243e:	d867      	bhi.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d05c      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x15a>
 8002444:	2b10      	cmp	r3, #16
 8002446:	d05a      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x15a>
 8002448:	e062      	b.n	8002510 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800245a:	f000 f95e 	bl	800271a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800246c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	609a      	str	r2, [r3, #8]
      break;
 8002476:	e04f      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002488:	f000 f947 	bl	800271a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800249a:	609a      	str	r2, [r3, #8]
      break;
 800249c:	e03c      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024aa:	461a      	mov	r2, r3
 80024ac:	f000 f8be 	bl	800262c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2150      	movs	r1, #80	; 0x50
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f915 	bl	80026e6 <TIM_ITRx_SetConfig>
      break;
 80024bc:	e02c      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ca:	461a      	mov	r2, r3
 80024cc:	f000 f8dc 	bl	8002688 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2160      	movs	r1, #96	; 0x60
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f905 	bl	80026e6 <TIM_ITRx_SetConfig>
      break;
 80024dc:	e01c      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ea:	461a      	mov	r2, r3
 80024ec:	f000 f89e 	bl	800262c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2140      	movs	r1, #64	; 0x40
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f8f5 	bl	80026e6 <TIM_ITRx_SetConfig>
      break;
 80024fc:	e00c      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	4610      	mov	r0, r2
 800250a:	f000 f8ec 	bl	80026e6 <TIM_ITRx_SetConfig>
      break;
 800250e:	e003      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
      break;
 8002514:	e000      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002516:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
	...

0800257c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a25      	ldr	r2, [pc, #148]	; (8002624 <TIM_Base_SetConfig+0xa8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d007      	beq.n	80025a4 <TIM_Base_SetConfig+0x28>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259a:	d003      	beq.n	80025a4 <TIM_Base_SetConfig+0x28>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a22      	ldr	r2, [pc, #136]	; (8002628 <TIM_Base_SetConfig+0xac>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d108      	bne.n	80025b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a1a      	ldr	r2, [pc, #104]	; (8002624 <TIM_Base_SetConfig+0xa8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d007      	beq.n	80025ce <TIM_Base_SetConfig+0x52>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d003      	beq.n	80025ce <TIM_Base_SetConfig+0x52>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a17      	ldr	r2, [pc, #92]	; (8002628 <TIM_Base_SetConfig+0xac>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d108      	bne.n	80025e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a07      	ldr	r2, [pc, #28]	; (8002624 <TIM_Base_SetConfig+0xa8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d103      	bne.n	8002614 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	615a      	str	r2, [r3, #20]
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40000400 	.word	0x40000400

0800262c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	f023 0201 	bic.w	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f023 030a 	bic.w	r3, r3, #10
 8002668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	621a      	str	r2, [r3, #32]
}
 800267e:	bf00      	nop
 8002680:	371c      	adds	r7, #28
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	f023 0210 	bic.w	r2, r3, #16
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	031b      	lsls	r3, r3, #12
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	621a      	str	r2, [r3, #32]
}
 80026dc:	bf00      	nop
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	f043 0307 	orr.w	r3, r3, #7
 8002708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	609a      	str	r2, [r3, #8]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800271a:	b480      	push	{r7}
 800271c:	b087      	sub	sp, #28
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002734:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	021a      	lsls	r2, r3, #8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	431a      	orrs	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	4313      	orrs	r3, r2
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	609a      	str	r2, [r3, #8]
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800276c:	2302      	movs	r3, #2
 800276e:	e041      	b.n	80027f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a14      	ldr	r2, [pc, #80]	; (8002800 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d009      	beq.n	80027c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027bc:	d004      	beq.n	80027c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a10      	ldr	r2, [pc, #64]	; (8002804 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d10c      	bne.n	80027e2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40000400 	.word	0x40000400

08002808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e042      	b.n	80028c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe f81a 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2224      	movs	r2, #36	; 0x24
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800286e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f97b 	bl	8002b6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002884:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002894:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b20      	cmp	r3, #32
 80028ea:	d16d      	bne.n	80029c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_UART_Transmit+0x2c>
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e066      	b.n	80029ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2221      	movs	r2, #33	; 0x21
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800290a:	f7fe f8f5 	bl	8000af8 <HAL_GetTick>
 800290e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	88fa      	ldrh	r2, [r7, #6]
 8002914:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	88fa      	ldrh	r2, [r7, #6]
 800291a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002924:	d108      	bne.n	8002938 <HAL_UART_Transmit+0x6c>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d104      	bne.n	8002938 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	e003      	b.n	8002940 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002940:	e02a      	b.n	8002998 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2200      	movs	r2, #0
 800294a:	2180      	movs	r1, #128	; 0x80
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f865 	bl	8002a1c <UART_WaitOnFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e036      	b.n	80029ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10b      	bne.n	800297a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002970:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	3302      	adds	r3, #2
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	e007      	b.n	800298a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	781a      	ldrb	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3301      	adds	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1cf      	bne.n	8002942 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2140      	movs	r1, #64	; 0x40
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f835 	bl	8002a1c <UART_WaitOnFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e006      	b.n	80029ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e000      	b.n	80029ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
  }
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	4613      	mov	r3, r2
 80029de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d112      	bne.n	8002a12 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_UART_Receive_IT+0x26>
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e00b      	b.n	8002a14 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	461a      	mov	r2, r3
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f875 	bl	8002af8 <UART_Start_Receive_IT>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	e000      	b.n	8002a14 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002a12:	2302      	movs	r3, #2
  }
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b090      	sub	sp, #64	; 0x40
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a2c:	e050      	b.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d04c      	beq.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a3c:	f7fe f85c 	bl	8000af8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d241      	bcs.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	e853 3f00 	ldrex	r3, [r3]
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	330c      	adds	r3, #12
 8002a6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a6c:	637a      	str	r2, [r7, #52]	; 0x34
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a74:	e841 2300 	strex	r3, r2, [r1]
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e5      	bne.n	8002a4c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3314      	adds	r3, #20
 8002a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	e853 3f00 	ldrex	r3, [r3]
 8002a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3314      	adds	r3, #20
 8002a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aa0:	623a      	str	r2, [r7, #32]
 8002aa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa4:	69f9      	ldr	r1, [r7, #28]
 8002aa6:	6a3a      	ldr	r2, [r7, #32]
 8002aa8:	e841 2300 	strex	r3, r2, [r1]
 8002aac:	61bb      	str	r3, [r7, #24]
   return(result);
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e5      	bne.n	8002a80 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e00f      	b.n	8002af0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d09f      	beq.n	8002a2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3740      	adds	r7, #64	; 0x40
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	88fa      	ldrh	r2, [r7, #6]
 8002b10:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	88fa      	ldrh	r2, [r7, #6]
 8002b16:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2222      	movs	r2, #34	; 0x22
 8002b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b3c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0220 	orr.w	r2, r2, #32
 8002b5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
	...

08002b6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ba6:	f023 030c 	bic.w	r3, r3, #12
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a2c      	ldr	r2, [pc, #176]	; (8002c80 <UART_SetConfig+0x114>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d103      	bne.n	8002bdc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bd4:	f7ff f95a 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	e002      	b.n	8002be2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bdc:	f7ff f942 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8002be0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	009a      	lsls	r2, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <UART_SetConfig+0x118>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	0119      	lsls	r1, r3, #4
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009a      	lsls	r2, r3, #2
 8002c0c:	441a      	add	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c18:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <UART_SetConfig+0x118>)
 8002c1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2064      	movs	r0, #100	; 0x64
 8002c22:	fb00 f303 	mul.w	r3, r0, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	3332      	adds	r3, #50	; 0x32
 8002c2c:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <UART_SetConfig+0x118>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c38:	4419      	add	r1, r3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	009a      	lsls	r2, r3, #2
 8002c44:	441a      	add	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <UART_SetConfig+0x118>)
 8002c52:	fba3 0302 	umull	r0, r3, r3, r2
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2064      	movs	r0, #100	; 0x64
 8002c5a:	fb00 f303 	mul.w	r3, r0, r3
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	3332      	adds	r3, #50	; 0x32
 8002c64:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <UART_SetConfig+0x118>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	f003 020f 	and.w	r2, r3, #15
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	440a      	add	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40013800 	.word	0x40013800
 8002c84:	51eb851f 	.word	0x51eb851f

08002c88 <siprintf>:
 8002c88:	b40e      	push	{r1, r2, r3}
 8002c8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c8e:	b500      	push	{lr}
 8002c90:	b09c      	sub	sp, #112	; 0x70
 8002c92:	ab1d      	add	r3, sp, #116	; 0x74
 8002c94:	9002      	str	r0, [sp, #8]
 8002c96:	9006      	str	r0, [sp, #24]
 8002c98:	9107      	str	r1, [sp, #28]
 8002c9a:	9104      	str	r1, [sp, #16]
 8002c9c:	4808      	ldr	r0, [pc, #32]	; (8002cc0 <siprintf+0x38>)
 8002c9e:	4909      	ldr	r1, [pc, #36]	; (8002cc4 <siprintf+0x3c>)
 8002ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ca4:	9105      	str	r1, [sp, #20]
 8002ca6:	6800      	ldr	r0, [r0, #0]
 8002ca8:	a902      	add	r1, sp, #8
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	f000 f99c 	bl	8002fe8 <_svfiprintf_r>
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	9b02      	ldr	r3, [sp, #8]
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	b01c      	add	sp, #112	; 0x70
 8002cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cbc:	b003      	add	sp, #12
 8002cbe:	4770      	bx	lr
 8002cc0:	20000058 	.word	0x20000058
 8002cc4:	ffff0208 	.word	0xffff0208

08002cc8 <memset>:
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4402      	add	r2, r0
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d100      	bne.n	8002cd2 <memset+0xa>
 8002cd0:	4770      	bx	lr
 8002cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd6:	e7f9      	b.n	8002ccc <memset+0x4>

08002cd8 <__errno>:
 8002cd8:	4b01      	ldr	r3, [pc, #4]	; (8002ce0 <__errno+0x8>)
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000058 	.word	0x20000058

08002ce4 <__libc_init_array>:
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	2600      	movs	r6, #0
 8002ce8:	4d0c      	ldr	r5, [pc, #48]	; (8002d1c <__libc_init_array+0x38>)
 8002cea:	4c0d      	ldr	r4, [pc, #52]	; (8002d20 <__libc_init_array+0x3c>)
 8002cec:	1b64      	subs	r4, r4, r5
 8002cee:	10a4      	asrs	r4, r4, #2
 8002cf0:	42a6      	cmp	r6, r4
 8002cf2:	d109      	bne.n	8002d08 <__libc_init_array+0x24>
 8002cf4:	f000 fc7a 	bl	80035ec <_init>
 8002cf8:	2600      	movs	r6, #0
 8002cfa:	4d0a      	ldr	r5, [pc, #40]	; (8002d24 <__libc_init_array+0x40>)
 8002cfc:	4c0a      	ldr	r4, [pc, #40]	; (8002d28 <__libc_init_array+0x44>)
 8002cfe:	1b64      	subs	r4, r4, r5
 8002d00:	10a4      	asrs	r4, r4, #2
 8002d02:	42a6      	cmp	r6, r4
 8002d04:	d105      	bne.n	8002d12 <__libc_init_array+0x2e>
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
 8002d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d0c:	4798      	blx	r3
 8002d0e:	3601      	adds	r6, #1
 8002d10:	e7ee      	b.n	8002cf0 <__libc_init_array+0xc>
 8002d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d16:	4798      	blx	r3
 8002d18:	3601      	adds	r6, #1
 8002d1a:	e7f2      	b.n	8002d02 <__libc_init_array+0x1e>
 8002d1c:	08003670 	.word	0x08003670
 8002d20:	08003670 	.word	0x08003670
 8002d24:	08003670 	.word	0x08003670
 8002d28:	08003674 	.word	0x08003674

08002d2c <__retarget_lock_acquire_recursive>:
 8002d2c:	4770      	bx	lr

08002d2e <__retarget_lock_release_recursive>:
 8002d2e:	4770      	bx	lr

08002d30 <memcpy>:
 8002d30:	440a      	add	r2, r1
 8002d32:	4291      	cmp	r1, r2
 8002d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d38:	d100      	bne.n	8002d3c <memcpy+0xc>
 8002d3a:	4770      	bx	lr
 8002d3c:	b510      	push	{r4, lr}
 8002d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d42:	4291      	cmp	r1, r2
 8002d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d48:	d1f9      	bne.n	8002d3e <memcpy+0xe>
 8002d4a:	bd10      	pop	{r4, pc}

08002d4c <_free_r>:
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	4605      	mov	r5, r0
 8002d50:	2900      	cmp	r1, #0
 8002d52:	d040      	beq.n	8002dd6 <_free_r+0x8a>
 8002d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d58:	1f0c      	subs	r4, r1, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bfb8      	it	lt
 8002d5e:	18e4      	addlt	r4, r4, r3
 8002d60:	f000 f8dc 	bl	8002f1c <__malloc_lock>
 8002d64:	4a1c      	ldr	r2, [pc, #112]	; (8002dd8 <_free_r+0x8c>)
 8002d66:	6813      	ldr	r3, [r2, #0]
 8002d68:	b933      	cbnz	r3, 8002d78 <_free_r+0x2c>
 8002d6a:	6063      	str	r3, [r4, #4]
 8002d6c:	6014      	str	r4, [r2, #0]
 8002d6e:	4628      	mov	r0, r5
 8002d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d74:	f000 b8d8 	b.w	8002f28 <__malloc_unlock>
 8002d78:	42a3      	cmp	r3, r4
 8002d7a:	d908      	bls.n	8002d8e <_free_r+0x42>
 8002d7c:	6820      	ldr	r0, [r4, #0]
 8002d7e:	1821      	adds	r1, r4, r0
 8002d80:	428b      	cmp	r3, r1
 8002d82:	bf01      	itttt	eq
 8002d84:	6819      	ldreq	r1, [r3, #0]
 8002d86:	685b      	ldreq	r3, [r3, #4]
 8002d88:	1809      	addeq	r1, r1, r0
 8002d8a:	6021      	streq	r1, [r4, #0]
 8002d8c:	e7ed      	b.n	8002d6a <_free_r+0x1e>
 8002d8e:	461a      	mov	r2, r3
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	b10b      	cbz	r3, 8002d98 <_free_r+0x4c>
 8002d94:	42a3      	cmp	r3, r4
 8002d96:	d9fa      	bls.n	8002d8e <_free_r+0x42>
 8002d98:	6811      	ldr	r1, [r2, #0]
 8002d9a:	1850      	adds	r0, r2, r1
 8002d9c:	42a0      	cmp	r0, r4
 8002d9e:	d10b      	bne.n	8002db8 <_free_r+0x6c>
 8002da0:	6820      	ldr	r0, [r4, #0]
 8002da2:	4401      	add	r1, r0
 8002da4:	1850      	adds	r0, r2, r1
 8002da6:	4283      	cmp	r3, r0
 8002da8:	6011      	str	r1, [r2, #0]
 8002daa:	d1e0      	bne.n	8002d6e <_free_r+0x22>
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4408      	add	r0, r1
 8002db2:	6010      	str	r0, [r2, #0]
 8002db4:	6053      	str	r3, [r2, #4]
 8002db6:	e7da      	b.n	8002d6e <_free_r+0x22>
 8002db8:	d902      	bls.n	8002dc0 <_free_r+0x74>
 8002dba:	230c      	movs	r3, #12
 8002dbc:	602b      	str	r3, [r5, #0]
 8002dbe:	e7d6      	b.n	8002d6e <_free_r+0x22>
 8002dc0:	6820      	ldr	r0, [r4, #0]
 8002dc2:	1821      	adds	r1, r4, r0
 8002dc4:	428b      	cmp	r3, r1
 8002dc6:	bf01      	itttt	eq
 8002dc8:	6819      	ldreq	r1, [r3, #0]
 8002dca:	685b      	ldreq	r3, [r3, #4]
 8002dcc:	1809      	addeq	r1, r1, r0
 8002dce:	6021      	streq	r1, [r4, #0]
 8002dd0:	6063      	str	r3, [r4, #4]
 8002dd2:	6054      	str	r4, [r2, #4]
 8002dd4:	e7cb      	b.n	8002d6e <_free_r+0x22>
 8002dd6:	bd38      	pop	{r3, r4, r5, pc}
 8002dd8:	200002e4 	.word	0x200002e4

08002ddc <sbrk_aligned>:
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	4e0e      	ldr	r6, [pc, #56]	; (8002e18 <sbrk_aligned+0x3c>)
 8002de0:	460c      	mov	r4, r1
 8002de2:	6831      	ldr	r1, [r6, #0]
 8002de4:	4605      	mov	r5, r0
 8002de6:	b911      	cbnz	r1, 8002dee <sbrk_aligned+0x12>
 8002de8:	f000 fbaa 	bl	8003540 <_sbrk_r>
 8002dec:	6030      	str	r0, [r6, #0]
 8002dee:	4621      	mov	r1, r4
 8002df0:	4628      	mov	r0, r5
 8002df2:	f000 fba5 	bl	8003540 <_sbrk_r>
 8002df6:	1c43      	adds	r3, r0, #1
 8002df8:	d00a      	beq.n	8002e10 <sbrk_aligned+0x34>
 8002dfa:	1cc4      	adds	r4, r0, #3
 8002dfc:	f024 0403 	bic.w	r4, r4, #3
 8002e00:	42a0      	cmp	r0, r4
 8002e02:	d007      	beq.n	8002e14 <sbrk_aligned+0x38>
 8002e04:	1a21      	subs	r1, r4, r0
 8002e06:	4628      	mov	r0, r5
 8002e08:	f000 fb9a 	bl	8003540 <_sbrk_r>
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	d101      	bne.n	8002e14 <sbrk_aligned+0x38>
 8002e10:	f04f 34ff 	mov.w	r4, #4294967295
 8002e14:	4620      	mov	r0, r4
 8002e16:	bd70      	pop	{r4, r5, r6, pc}
 8002e18:	200002e8 	.word	0x200002e8

08002e1c <_malloc_r>:
 8002e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e20:	1ccd      	adds	r5, r1, #3
 8002e22:	f025 0503 	bic.w	r5, r5, #3
 8002e26:	3508      	adds	r5, #8
 8002e28:	2d0c      	cmp	r5, #12
 8002e2a:	bf38      	it	cc
 8002e2c:	250c      	movcc	r5, #12
 8002e2e:	2d00      	cmp	r5, #0
 8002e30:	4607      	mov	r7, r0
 8002e32:	db01      	blt.n	8002e38 <_malloc_r+0x1c>
 8002e34:	42a9      	cmp	r1, r5
 8002e36:	d905      	bls.n	8002e44 <_malloc_r+0x28>
 8002e38:	230c      	movs	r3, #12
 8002e3a:	2600      	movs	r6, #0
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	4630      	mov	r0, r6
 8002e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f18 <_malloc_r+0xfc>
 8002e48:	f000 f868 	bl	8002f1c <__malloc_lock>
 8002e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e50:	461c      	mov	r4, r3
 8002e52:	bb5c      	cbnz	r4, 8002eac <_malloc_r+0x90>
 8002e54:	4629      	mov	r1, r5
 8002e56:	4638      	mov	r0, r7
 8002e58:	f7ff ffc0 	bl	8002ddc <sbrk_aligned>
 8002e5c:	1c43      	adds	r3, r0, #1
 8002e5e:	4604      	mov	r4, r0
 8002e60:	d155      	bne.n	8002f0e <_malloc_r+0xf2>
 8002e62:	f8d8 4000 	ldr.w	r4, [r8]
 8002e66:	4626      	mov	r6, r4
 8002e68:	2e00      	cmp	r6, #0
 8002e6a:	d145      	bne.n	8002ef8 <_malloc_r+0xdc>
 8002e6c:	2c00      	cmp	r4, #0
 8002e6e:	d048      	beq.n	8002f02 <_malloc_r+0xe6>
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	4631      	mov	r1, r6
 8002e74:	4638      	mov	r0, r7
 8002e76:	eb04 0903 	add.w	r9, r4, r3
 8002e7a:	f000 fb61 	bl	8003540 <_sbrk_r>
 8002e7e:	4581      	cmp	r9, r0
 8002e80:	d13f      	bne.n	8002f02 <_malloc_r+0xe6>
 8002e82:	6821      	ldr	r1, [r4, #0]
 8002e84:	4638      	mov	r0, r7
 8002e86:	1a6d      	subs	r5, r5, r1
 8002e88:	4629      	mov	r1, r5
 8002e8a:	f7ff ffa7 	bl	8002ddc <sbrk_aligned>
 8002e8e:	3001      	adds	r0, #1
 8002e90:	d037      	beq.n	8002f02 <_malloc_r+0xe6>
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	442b      	add	r3, r5
 8002e96:	6023      	str	r3, [r4, #0]
 8002e98:	f8d8 3000 	ldr.w	r3, [r8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d038      	beq.n	8002f12 <_malloc_r+0xf6>
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	42a2      	cmp	r2, r4
 8002ea4:	d12b      	bne.n	8002efe <_malloc_r+0xe2>
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	e00f      	b.n	8002ecc <_malloc_r+0xb0>
 8002eac:	6822      	ldr	r2, [r4, #0]
 8002eae:	1b52      	subs	r2, r2, r5
 8002eb0:	d41f      	bmi.n	8002ef2 <_malloc_r+0xd6>
 8002eb2:	2a0b      	cmp	r2, #11
 8002eb4:	d917      	bls.n	8002ee6 <_malloc_r+0xca>
 8002eb6:	1961      	adds	r1, r4, r5
 8002eb8:	42a3      	cmp	r3, r4
 8002eba:	6025      	str	r5, [r4, #0]
 8002ebc:	bf18      	it	ne
 8002ebe:	6059      	strne	r1, [r3, #4]
 8002ec0:	6863      	ldr	r3, [r4, #4]
 8002ec2:	bf08      	it	eq
 8002ec4:	f8c8 1000 	streq.w	r1, [r8]
 8002ec8:	5162      	str	r2, [r4, r5]
 8002eca:	604b      	str	r3, [r1, #4]
 8002ecc:	4638      	mov	r0, r7
 8002ece:	f104 060b 	add.w	r6, r4, #11
 8002ed2:	f000 f829 	bl	8002f28 <__malloc_unlock>
 8002ed6:	f026 0607 	bic.w	r6, r6, #7
 8002eda:	1d23      	adds	r3, r4, #4
 8002edc:	1af2      	subs	r2, r6, r3
 8002ede:	d0ae      	beq.n	8002e3e <_malloc_r+0x22>
 8002ee0:	1b9b      	subs	r3, r3, r6
 8002ee2:	50a3      	str	r3, [r4, r2]
 8002ee4:	e7ab      	b.n	8002e3e <_malloc_r+0x22>
 8002ee6:	42a3      	cmp	r3, r4
 8002ee8:	6862      	ldr	r2, [r4, #4]
 8002eea:	d1dd      	bne.n	8002ea8 <_malloc_r+0x8c>
 8002eec:	f8c8 2000 	str.w	r2, [r8]
 8002ef0:	e7ec      	b.n	8002ecc <_malloc_r+0xb0>
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	6864      	ldr	r4, [r4, #4]
 8002ef6:	e7ac      	b.n	8002e52 <_malloc_r+0x36>
 8002ef8:	4634      	mov	r4, r6
 8002efa:	6876      	ldr	r6, [r6, #4]
 8002efc:	e7b4      	b.n	8002e68 <_malloc_r+0x4c>
 8002efe:	4613      	mov	r3, r2
 8002f00:	e7cc      	b.n	8002e9c <_malloc_r+0x80>
 8002f02:	230c      	movs	r3, #12
 8002f04:	4638      	mov	r0, r7
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	f000 f80e 	bl	8002f28 <__malloc_unlock>
 8002f0c:	e797      	b.n	8002e3e <_malloc_r+0x22>
 8002f0e:	6025      	str	r5, [r4, #0]
 8002f10:	e7dc      	b.n	8002ecc <_malloc_r+0xb0>
 8002f12:	605b      	str	r3, [r3, #4]
 8002f14:	deff      	udf	#255	; 0xff
 8002f16:	bf00      	nop
 8002f18:	200002e4 	.word	0x200002e4

08002f1c <__malloc_lock>:
 8002f1c:	4801      	ldr	r0, [pc, #4]	; (8002f24 <__malloc_lock+0x8>)
 8002f1e:	f7ff bf05 	b.w	8002d2c <__retarget_lock_acquire_recursive>
 8002f22:	bf00      	nop
 8002f24:	200002e0 	.word	0x200002e0

08002f28 <__malloc_unlock>:
 8002f28:	4801      	ldr	r0, [pc, #4]	; (8002f30 <__malloc_unlock+0x8>)
 8002f2a:	f7ff bf00 	b.w	8002d2e <__retarget_lock_release_recursive>
 8002f2e:	bf00      	nop
 8002f30:	200002e0 	.word	0x200002e0

08002f34 <__ssputs_r>:
 8002f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f38:	461f      	mov	r7, r3
 8002f3a:	688e      	ldr	r6, [r1, #8]
 8002f3c:	4682      	mov	sl, r0
 8002f3e:	42be      	cmp	r6, r7
 8002f40:	460c      	mov	r4, r1
 8002f42:	4690      	mov	r8, r2
 8002f44:	680b      	ldr	r3, [r1, #0]
 8002f46:	d82c      	bhi.n	8002fa2 <__ssputs_r+0x6e>
 8002f48:	898a      	ldrh	r2, [r1, #12]
 8002f4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f4e:	d026      	beq.n	8002f9e <__ssputs_r+0x6a>
 8002f50:	6965      	ldr	r5, [r4, #20]
 8002f52:	6909      	ldr	r1, [r1, #16]
 8002f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f58:	eba3 0901 	sub.w	r9, r3, r1
 8002f5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f60:	1c7b      	adds	r3, r7, #1
 8002f62:	444b      	add	r3, r9
 8002f64:	106d      	asrs	r5, r5, #1
 8002f66:	429d      	cmp	r5, r3
 8002f68:	bf38      	it	cc
 8002f6a:	461d      	movcc	r5, r3
 8002f6c:	0553      	lsls	r3, r2, #21
 8002f6e:	d527      	bpl.n	8002fc0 <__ssputs_r+0x8c>
 8002f70:	4629      	mov	r1, r5
 8002f72:	f7ff ff53 	bl	8002e1c <_malloc_r>
 8002f76:	4606      	mov	r6, r0
 8002f78:	b360      	cbz	r0, 8002fd4 <__ssputs_r+0xa0>
 8002f7a:	464a      	mov	r2, r9
 8002f7c:	6921      	ldr	r1, [r4, #16]
 8002f7e:	f7ff fed7 	bl	8002d30 <memcpy>
 8002f82:	89a3      	ldrh	r3, [r4, #12]
 8002f84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8c:	81a3      	strh	r3, [r4, #12]
 8002f8e:	6126      	str	r6, [r4, #16]
 8002f90:	444e      	add	r6, r9
 8002f92:	6026      	str	r6, [r4, #0]
 8002f94:	463e      	mov	r6, r7
 8002f96:	6165      	str	r5, [r4, #20]
 8002f98:	eba5 0509 	sub.w	r5, r5, r9
 8002f9c:	60a5      	str	r5, [r4, #8]
 8002f9e:	42be      	cmp	r6, r7
 8002fa0:	d900      	bls.n	8002fa4 <__ssputs_r+0x70>
 8002fa2:	463e      	mov	r6, r7
 8002fa4:	4632      	mov	r2, r6
 8002fa6:	4641      	mov	r1, r8
 8002fa8:	6820      	ldr	r0, [r4, #0]
 8002faa:	f000 faaf 	bl	800350c <memmove>
 8002fae:	2000      	movs	r0, #0
 8002fb0:	68a3      	ldr	r3, [r4, #8]
 8002fb2:	1b9b      	subs	r3, r3, r6
 8002fb4:	60a3      	str	r3, [r4, #8]
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	4433      	add	r3, r6
 8002fba:	6023      	str	r3, [r4, #0]
 8002fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fc0:	462a      	mov	r2, r5
 8002fc2:	f000 fadb 	bl	800357c <_realloc_r>
 8002fc6:	4606      	mov	r6, r0
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	d1e0      	bne.n	8002f8e <__ssputs_r+0x5a>
 8002fcc:	4650      	mov	r0, sl
 8002fce:	6921      	ldr	r1, [r4, #16]
 8002fd0:	f7ff febc 	bl	8002d4c <_free_r>
 8002fd4:	230c      	movs	r3, #12
 8002fd6:	f8ca 3000 	str.w	r3, [sl]
 8002fda:	89a3      	ldrh	r3, [r4, #12]
 8002fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe4:	81a3      	strh	r3, [r4, #12]
 8002fe6:	e7e9      	b.n	8002fbc <__ssputs_r+0x88>

08002fe8 <_svfiprintf_r>:
 8002fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fec:	4698      	mov	r8, r3
 8002fee:	898b      	ldrh	r3, [r1, #12]
 8002ff0:	4607      	mov	r7, r0
 8002ff2:	061b      	lsls	r3, r3, #24
 8002ff4:	460d      	mov	r5, r1
 8002ff6:	4614      	mov	r4, r2
 8002ff8:	b09d      	sub	sp, #116	; 0x74
 8002ffa:	d50e      	bpl.n	800301a <_svfiprintf_r+0x32>
 8002ffc:	690b      	ldr	r3, [r1, #16]
 8002ffe:	b963      	cbnz	r3, 800301a <_svfiprintf_r+0x32>
 8003000:	2140      	movs	r1, #64	; 0x40
 8003002:	f7ff ff0b 	bl	8002e1c <_malloc_r>
 8003006:	6028      	str	r0, [r5, #0]
 8003008:	6128      	str	r0, [r5, #16]
 800300a:	b920      	cbnz	r0, 8003016 <_svfiprintf_r+0x2e>
 800300c:	230c      	movs	r3, #12
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	e0d0      	b.n	80031b8 <_svfiprintf_r+0x1d0>
 8003016:	2340      	movs	r3, #64	; 0x40
 8003018:	616b      	str	r3, [r5, #20]
 800301a:	2300      	movs	r3, #0
 800301c:	9309      	str	r3, [sp, #36]	; 0x24
 800301e:	2320      	movs	r3, #32
 8003020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003024:	2330      	movs	r3, #48	; 0x30
 8003026:	f04f 0901 	mov.w	r9, #1
 800302a:	f8cd 800c 	str.w	r8, [sp, #12]
 800302e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80031d0 <_svfiprintf_r+0x1e8>
 8003032:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003036:	4623      	mov	r3, r4
 8003038:	469a      	mov	sl, r3
 800303a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800303e:	b10a      	cbz	r2, 8003044 <_svfiprintf_r+0x5c>
 8003040:	2a25      	cmp	r2, #37	; 0x25
 8003042:	d1f9      	bne.n	8003038 <_svfiprintf_r+0x50>
 8003044:	ebba 0b04 	subs.w	fp, sl, r4
 8003048:	d00b      	beq.n	8003062 <_svfiprintf_r+0x7a>
 800304a:	465b      	mov	r3, fp
 800304c:	4622      	mov	r2, r4
 800304e:	4629      	mov	r1, r5
 8003050:	4638      	mov	r0, r7
 8003052:	f7ff ff6f 	bl	8002f34 <__ssputs_r>
 8003056:	3001      	adds	r0, #1
 8003058:	f000 80a9 	beq.w	80031ae <_svfiprintf_r+0x1c6>
 800305c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800305e:	445a      	add	r2, fp
 8003060:	9209      	str	r2, [sp, #36]	; 0x24
 8003062:	f89a 3000 	ldrb.w	r3, [sl]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80a1 	beq.w	80031ae <_svfiprintf_r+0x1c6>
 800306c:	2300      	movs	r3, #0
 800306e:	f04f 32ff 	mov.w	r2, #4294967295
 8003072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003076:	f10a 0a01 	add.w	sl, sl, #1
 800307a:	9304      	str	r3, [sp, #16]
 800307c:	9307      	str	r3, [sp, #28]
 800307e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003082:	931a      	str	r3, [sp, #104]	; 0x68
 8003084:	4654      	mov	r4, sl
 8003086:	2205      	movs	r2, #5
 8003088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800308c:	4850      	ldr	r0, [pc, #320]	; (80031d0 <_svfiprintf_r+0x1e8>)
 800308e:	f000 fa67 	bl	8003560 <memchr>
 8003092:	9a04      	ldr	r2, [sp, #16]
 8003094:	b9d8      	cbnz	r0, 80030ce <_svfiprintf_r+0xe6>
 8003096:	06d0      	lsls	r0, r2, #27
 8003098:	bf44      	itt	mi
 800309a:	2320      	movmi	r3, #32
 800309c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030a0:	0711      	lsls	r1, r2, #28
 80030a2:	bf44      	itt	mi
 80030a4:	232b      	movmi	r3, #43	; 0x2b
 80030a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030aa:	f89a 3000 	ldrb.w	r3, [sl]
 80030ae:	2b2a      	cmp	r3, #42	; 0x2a
 80030b0:	d015      	beq.n	80030de <_svfiprintf_r+0xf6>
 80030b2:	4654      	mov	r4, sl
 80030b4:	2000      	movs	r0, #0
 80030b6:	f04f 0c0a 	mov.w	ip, #10
 80030ba:	9a07      	ldr	r2, [sp, #28]
 80030bc:	4621      	mov	r1, r4
 80030be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030c2:	3b30      	subs	r3, #48	; 0x30
 80030c4:	2b09      	cmp	r3, #9
 80030c6:	d94d      	bls.n	8003164 <_svfiprintf_r+0x17c>
 80030c8:	b1b0      	cbz	r0, 80030f8 <_svfiprintf_r+0x110>
 80030ca:	9207      	str	r2, [sp, #28]
 80030cc:	e014      	b.n	80030f8 <_svfiprintf_r+0x110>
 80030ce:	eba0 0308 	sub.w	r3, r0, r8
 80030d2:	fa09 f303 	lsl.w	r3, r9, r3
 80030d6:	4313      	orrs	r3, r2
 80030d8:	46a2      	mov	sl, r4
 80030da:	9304      	str	r3, [sp, #16]
 80030dc:	e7d2      	b.n	8003084 <_svfiprintf_r+0x9c>
 80030de:	9b03      	ldr	r3, [sp, #12]
 80030e0:	1d19      	adds	r1, r3, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	9103      	str	r1, [sp, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bfbb      	ittet	lt
 80030ea:	425b      	neglt	r3, r3
 80030ec:	f042 0202 	orrlt.w	r2, r2, #2
 80030f0:	9307      	strge	r3, [sp, #28]
 80030f2:	9307      	strlt	r3, [sp, #28]
 80030f4:	bfb8      	it	lt
 80030f6:	9204      	strlt	r2, [sp, #16]
 80030f8:	7823      	ldrb	r3, [r4, #0]
 80030fa:	2b2e      	cmp	r3, #46	; 0x2e
 80030fc:	d10c      	bne.n	8003118 <_svfiprintf_r+0x130>
 80030fe:	7863      	ldrb	r3, [r4, #1]
 8003100:	2b2a      	cmp	r3, #42	; 0x2a
 8003102:	d134      	bne.n	800316e <_svfiprintf_r+0x186>
 8003104:	9b03      	ldr	r3, [sp, #12]
 8003106:	3402      	adds	r4, #2
 8003108:	1d1a      	adds	r2, r3, #4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	9203      	str	r2, [sp, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	bfb8      	it	lt
 8003112:	f04f 33ff 	movlt.w	r3, #4294967295
 8003116:	9305      	str	r3, [sp, #20]
 8003118:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80031d4 <_svfiprintf_r+0x1ec>
 800311c:	2203      	movs	r2, #3
 800311e:	4650      	mov	r0, sl
 8003120:	7821      	ldrb	r1, [r4, #0]
 8003122:	f000 fa1d 	bl	8003560 <memchr>
 8003126:	b138      	cbz	r0, 8003138 <_svfiprintf_r+0x150>
 8003128:	2240      	movs	r2, #64	; 0x40
 800312a:	9b04      	ldr	r3, [sp, #16]
 800312c:	eba0 000a 	sub.w	r0, r0, sl
 8003130:	4082      	lsls	r2, r0
 8003132:	4313      	orrs	r3, r2
 8003134:	3401      	adds	r4, #1
 8003136:	9304      	str	r3, [sp, #16]
 8003138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800313c:	2206      	movs	r2, #6
 800313e:	4826      	ldr	r0, [pc, #152]	; (80031d8 <_svfiprintf_r+0x1f0>)
 8003140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003144:	f000 fa0c 	bl	8003560 <memchr>
 8003148:	2800      	cmp	r0, #0
 800314a:	d038      	beq.n	80031be <_svfiprintf_r+0x1d6>
 800314c:	4b23      	ldr	r3, [pc, #140]	; (80031dc <_svfiprintf_r+0x1f4>)
 800314e:	bb1b      	cbnz	r3, 8003198 <_svfiprintf_r+0x1b0>
 8003150:	9b03      	ldr	r3, [sp, #12]
 8003152:	3307      	adds	r3, #7
 8003154:	f023 0307 	bic.w	r3, r3, #7
 8003158:	3308      	adds	r3, #8
 800315a:	9303      	str	r3, [sp, #12]
 800315c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800315e:	4433      	add	r3, r6
 8003160:	9309      	str	r3, [sp, #36]	; 0x24
 8003162:	e768      	b.n	8003036 <_svfiprintf_r+0x4e>
 8003164:	460c      	mov	r4, r1
 8003166:	2001      	movs	r0, #1
 8003168:	fb0c 3202 	mla	r2, ip, r2, r3
 800316c:	e7a6      	b.n	80030bc <_svfiprintf_r+0xd4>
 800316e:	2300      	movs	r3, #0
 8003170:	f04f 0c0a 	mov.w	ip, #10
 8003174:	4619      	mov	r1, r3
 8003176:	3401      	adds	r4, #1
 8003178:	9305      	str	r3, [sp, #20]
 800317a:	4620      	mov	r0, r4
 800317c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003180:	3a30      	subs	r2, #48	; 0x30
 8003182:	2a09      	cmp	r2, #9
 8003184:	d903      	bls.n	800318e <_svfiprintf_r+0x1a6>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0c6      	beq.n	8003118 <_svfiprintf_r+0x130>
 800318a:	9105      	str	r1, [sp, #20]
 800318c:	e7c4      	b.n	8003118 <_svfiprintf_r+0x130>
 800318e:	4604      	mov	r4, r0
 8003190:	2301      	movs	r3, #1
 8003192:	fb0c 2101 	mla	r1, ip, r1, r2
 8003196:	e7f0      	b.n	800317a <_svfiprintf_r+0x192>
 8003198:	ab03      	add	r3, sp, #12
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	462a      	mov	r2, r5
 800319e:	4638      	mov	r0, r7
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <_svfiprintf_r+0x1f8>)
 80031a2:	a904      	add	r1, sp, #16
 80031a4:	f3af 8000 	nop.w
 80031a8:	1c42      	adds	r2, r0, #1
 80031aa:	4606      	mov	r6, r0
 80031ac:	d1d6      	bne.n	800315c <_svfiprintf_r+0x174>
 80031ae:	89ab      	ldrh	r3, [r5, #12]
 80031b0:	065b      	lsls	r3, r3, #25
 80031b2:	f53f af2d 	bmi.w	8003010 <_svfiprintf_r+0x28>
 80031b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031b8:	b01d      	add	sp, #116	; 0x74
 80031ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031be:	ab03      	add	r3, sp, #12
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	462a      	mov	r2, r5
 80031c4:	4638      	mov	r0, r7
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <_svfiprintf_r+0x1f8>)
 80031c8:	a904      	add	r1, sp, #16
 80031ca:	f000 f87d 	bl	80032c8 <_printf_i>
 80031ce:	e7eb      	b.n	80031a8 <_svfiprintf_r+0x1c0>
 80031d0:	0800363a 	.word	0x0800363a
 80031d4:	08003640 	.word	0x08003640
 80031d8:	08003644 	.word	0x08003644
 80031dc:	00000000 	.word	0x00000000
 80031e0:	08002f35 	.word	0x08002f35

080031e4 <_printf_common>:
 80031e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031e8:	4616      	mov	r6, r2
 80031ea:	4699      	mov	r9, r3
 80031ec:	688a      	ldr	r2, [r1, #8]
 80031ee:	690b      	ldr	r3, [r1, #16]
 80031f0:	4607      	mov	r7, r0
 80031f2:	4293      	cmp	r3, r2
 80031f4:	bfb8      	it	lt
 80031f6:	4613      	movlt	r3, r2
 80031f8:	6033      	str	r3, [r6, #0]
 80031fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031fe:	460c      	mov	r4, r1
 8003200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003204:	b10a      	cbz	r2, 800320a <_printf_common+0x26>
 8003206:	3301      	adds	r3, #1
 8003208:	6033      	str	r3, [r6, #0]
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	0699      	lsls	r1, r3, #26
 800320e:	bf42      	ittt	mi
 8003210:	6833      	ldrmi	r3, [r6, #0]
 8003212:	3302      	addmi	r3, #2
 8003214:	6033      	strmi	r3, [r6, #0]
 8003216:	6825      	ldr	r5, [r4, #0]
 8003218:	f015 0506 	ands.w	r5, r5, #6
 800321c:	d106      	bne.n	800322c <_printf_common+0x48>
 800321e:	f104 0a19 	add.w	sl, r4, #25
 8003222:	68e3      	ldr	r3, [r4, #12]
 8003224:	6832      	ldr	r2, [r6, #0]
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	42ab      	cmp	r3, r5
 800322a:	dc2b      	bgt.n	8003284 <_printf_common+0xa0>
 800322c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003230:	1e13      	subs	r3, r2, #0
 8003232:	6822      	ldr	r2, [r4, #0]
 8003234:	bf18      	it	ne
 8003236:	2301      	movne	r3, #1
 8003238:	0692      	lsls	r2, r2, #26
 800323a:	d430      	bmi.n	800329e <_printf_common+0xba>
 800323c:	4649      	mov	r1, r9
 800323e:	4638      	mov	r0, r7
 8003240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003244:	47c0      	blx	r8
 8003246:	3001      	adds	r0, #1
 8003248:	d023      	beq.n	8003292 <_printf_common+0xae>
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	6922      	ldr	r2, [r4, #16]
 800324e:	f003 0306 	and.w	r3, r3, #6
 8003252:	2b04      	cmp	r3, #4
 8003254:	bf14      	ite	ne
 8003256:	2500      	movne	r5, #0
 8003258:	6833      	ldreq	r3, [r6, #0]
 800325a:	f04f 0600 	mov.w	r6, #0
 800325e:	bf08      	it	eq
 8003260:	68e5      	ldreq	r5, [r4, #12]
 8003262:	f104 041a 	add.w	r4, r4, #26
 8003266:	bf08      	it	eq
 8003268:	1aed      	subeq	r5, r5, r3
 800326a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800326e:	bf08      	it	eq
 8003270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003274:	4293      	cmp	r3, r2
 8003276:	bfc4      	itt	gt
 8003278:	1a9b      	subgt	r3, r3, r2
 800327a:	18ed      	addgt	r5, r5, r3
 800327c:	42b5      	cmp	r5, r6
 800327e:	d11a      	bne.n	80032b6 <_printf_common+0xd2>
 8003280:	2000      	movs	r0, #0
 8003282:	e008      	b.n	8003296 <_printf_common+0xb2>
 8003284:	2301      	movs	r3, #1
 8003286:	4652      	mov	r2, sl
 8003288:	4649      	mov	r1, r9
 800328a:	4638      	mov	r0, r7
 800328c:	47c0      	blx	r8
 800328e:	3001      	adds	r0, #1
 8003290:	d103      	bne.n	800329a <_printf_common+0xb6>
 8003292:	f04f 30ff 	mov.w	r0, #4294967295
 8003296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800329a:	3501      	adds	r5, #1
 800329c:	e7c1      	b.n	8003222 <_printf_common+0x3e>
 800329e:	2030      	movs	r0, #48	; 0x30
 80032a0:	18e1      	adds	r1, r4, r3
 80032a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032ac:	4422      	add	r2, r4
 80032ae:	3302      	adds	r3, #2
 80032b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032b4:	e7c2      	b.n	800323c <_printf_common+0x58>
 80032b6:	2301      	movs	r3, #1
 80032b8:	4622      	mov	r2, r4
 80032ba:	4649      	mov	r1, r9
 80032bc:	4638      	mov	r0, r7
 80032be:	47c0      	blx	r8
 80032c0:	3001      	adds	r0, #1
 80032c2:	d0e6      	beq.n	8003292 <_printf_common+0xae>
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7d9      	b.n	800327c <_printf_common+0x98>

080032c8 <_printf_i>:
 80032c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032cc:	7e0f      	ldrb	r7, [r1, #24]
 80032ce:	4691      	mov	r9, r2
 80032d0:	2f78      	cmp	r7, #120	; 0x78
 80032d2:	4680      	mov	r8, r0
 80032d4:	460c      	mov	r4, r1
 80032d6:	469a      	mov	sl, r3
 80032d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032de:	d807      	bhi.n	80032f0 <_printf_i+0x28>
 80032e0:	2f62      	cmp	r7, #98	; 0x62
 80032e2:	d80a      	bhi.n	80032fa <_printf_i+0x32>
 80032e4:	2f00      	cmp	r7, #0
 80032e6:	f000 80d5 	beq.w	8003494 <_printf_i+0x1cc>
 80032ea:	2f58      	cmp	r7, #88	; 0x58
 80032ec:	f000 80c1 	beq.w	8003472 <_printf_i+0x1aa>
 80032f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032f8:	e03a      	b.n	8003370 <_printf_i+0xa8>
 80032fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032fe:	2b15      	cmp	r3, #21
 8003300:	d8f6      	bhi.n	80032f0 <_printf_i+0x28>
 8003302:	a101      	add	r1, pc, #4	; (adr r1, 8003308 <_printf_i+0x40>)
 8003304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003308:	08003361 	.word	0x08003361
 800330c:	08003375 	.word	0x08003375
 8003310:	080032f1 	.word	0x080032f1
 8003314:	080032f1 	.word	0x080032f1
 8003318:	080032f1 	.word	0x080032f1
 800331c:	080032f1 	.word	0x080032f1
 8003320:	08003375 	.word	0x08003375
 8003324:	080032f1 	.word	0x080032f1
 8003328:	080032f1 	.word	0x080032f1
 800332c:	080032f1 	.word	0x080032f1
 8003330:	080032f1 	.word	0x080032f1
 8003334:	0800347b 	.word	0x0800347b
 8003338:	080033a1 	.word	0x080033a1
 800333c:	08003435 	.word	0x08003435
 8003340:	080032f1 	.word	0x080032f1
 8003344:	080032f1 	.word	0x080032f1
 8003348:	0800349d 	.word	0x0800349d
 800334c:	080032f1 	.word	0x080032f1
 8003350:	080033a1 	.word	0x080033a1
 8003354:	080032f1 	.word	0x080032f1
 8003358:	080032f1 	.word	0x080032f1
 800335c:	0800343d 	.word	0x0800343d
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	1d1a      	adds	r2, r3, #4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	602a      	str	r2, [r5, #0]
 8003368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800336c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003370:	2301      	movs	r3, #1
 8003372:	e0a0      	b.n	80034b6 <_printf_i+0x1ee>
 8003374:	6820      	ldr	r0, [r4, #0]
 8003376:	682b      	ldr	r3, [r5, #0]
 8003378:	0607      	lsls	r7, r0, #24
 800337a:	f103 0104 	add.w	r1, r3, #4
 800337e:	6029      	str	r1, [r5, #0]
 8003380:	d501      	bpl.n	8003386 <_printf_i+0xbe>
 8003382:	681e      	ldr	r6, [r3, #0]
 8003384:	e003      	b.n	800338e <_printf_i+0xc6>
 8003386:	0646      	lsls	r6, r0, #25
 8003388:	d5fb      	bpl.n	8003382 <_printf_i+0xba>
 800338a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800338e:	2e00      	cmp	r6, #0
 8003390:	da03      	bge.n	800339a <_printf_i+0xd2>
 8003392:	232d      	movs	r3, #45	; 0x2d
 8003394:	4276      	negs	r6, r6
 8003396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800339a:	230a      	movs	r3, #10
 800339c:	4859      	ldr	r0, [pc, #356]	; (8003504 <_printf_i+0x23c>)
 800339e:	e012      	b.n	80033c6 <_printf_i+0xfe>
 80033a0:	682b      	ldr	r3, [r5, #0]
 80033a2:	6820      	ldr	r0, [r4, #0]
 80033a4:	1d19      	adds	r1, r3, #4
 80033a6:	6029      	str	r1, [r5, #0]
 80033a8:	0605      	lsls	r5, r0, #24
 80033aa:	d501      	bpl.n	80033b0 <_printf_i+0xe8>
 80033ac:	681e      	ldr	r6, [r3, #0]
 80033ae:	e002      	b.n	80033b6 <_printf_i+0xee>
 80033b0:	0641      	lsls	r1, r0, #25
 80033b2:	d5fb      	bpl.n	80033ac <_printf_i+0xe4>
 80033b4:	881e      	ldrh	r6, [r3, #0]
 80033b6:	2f6f      	cmp	r7, #111	; 0x6f
 80033b8:	bf0c      	ite	eq
 80033ba:	2308      	moveq	r3, #8
 80033bc:	230a      	movne	r3, #10
 80033be:	4851      	ldr	r0, [pc, #324]	; (8003504 <_printf_i+0x23c>)
 80033c0:	2100      	movs	r1, #0
 80033c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033c6:	6865      	ldr	r5, [r4, #4]
 80033c8:	2d00      	cmp	r5, #0
 80033ca:	bfa8      	it	ge
 80033cc:	6821      	ldrge	r1, [r4, #0]
 80033ce:	60a5      	str	r5, [r4, #8]
 80033d0:	bfa4      	itt	ge
 80033d2:	f021 0104 	bicge.w	r1, r1, #4
 80033d6:	6021      	strge	r1, [r4, #0]
 80033d8:	b90e      	cbnz	r6, 80033de <_printf_i+0x116>
 80033da:	2d00      	cmp	r5, #0
 80033dc:	d04b      	beq.n	8003476 <_printf_i+0x1ae>
 80033de:	4615      	mov	r5, r2
 80033e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80033e4:	fb03 6711 	mls	r7, r3, r1, r6
 80033e8:	5dc7      	ldrb	r7, [r0, r7]
 80033ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033ee:	4637      	mov	r7, r6
 80033f0:	42bb      	cmp	r3, r7
 80033f2:	460e      	mov	r6, r1
 80033f4:	d9f4      	bls.n	80033e0 <_printf_i+0x118>
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d10b      	bne.n	8003412 <_printf_i+0x14a>
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	07de      	lsls	r6, r3, #31
 80033fe:	d508      	bpl.n	8003412 <_printf_i+0x14a>
 8003400:	6923      	ldr	r3, [r4, #16]
 8003402:	6861      	ldr	r1, [r4, #4]
 8003404:	4299      	cmp	r1, r3
 8003406:	bfde      	ittt	le
 8003408:	2330      	movle	r3, #48	; 0x30
 800340a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800340e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003412:	1b52      	subs	r2, r2, r5
 8003414:	6122      	str	r2, [r4, #16]
 8003416:	464b      	mov	r3, r9
 8003418:	4621      	mov	r1, r4
 800341a:	4640      	mov	r0, r8
 800341c:	f8cd a000 	str.w	sl, [sp]
 8003420:	aa03      	add	r2, sp, #12
 8003422:	f7ff fedf 	bl	80031e4 <_printf_common>
 8003426:	3001      	adds	r0, #1
 8003428:	d14a      	bne.n	80034c0 <_printf_i+0x1f8>
 800342a:	f04f 30ff 	mov.w	r0, #4294967295
 800342e:	b004      	add	sp, #16
 8003430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	f043 0320 	orr.w	r3, r3, #32
 800343a:	6023      	str	r3, [r4, #0]
 800343c:	2778      	movs	r7, #120	; 0x78
 800343e:	4832      	ldr	r0, [pc, #200]	; (8003508 <_printf_i+0x240>)
 8003440:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	6829      	ldr	r1, [r5, #0]
 8003448:	061f      	lsls	r7, r3, #24
 800344a:	f851 6b04 	ldr.w	r6, [r1], #4
 800344e:	d402      	bmi.n	8003456 <_printf_i+0x18e>
 8003450:	065f      	lsls	r7, r3, #25
 8003452:	bf48      	it	mi
 8003454:	b2b6      	uxthmi	r6, r6
 8003456:	07df      	lsls	r7, r3, #31
 8003458:	bf48      	it	mi
 800345a:	f043 0320 	orrmi.w	r3, r3, #32
 800345e:	6029      	str	r1, [r5, #0]
 8003460:	bf48      	it	mi
 8003462:	6023      	strmi	r3, [r4, #0]
 8003464:	b91e      	cbnz	r6, 800346e <_printf_i+0x1a6>
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	f023 0320 	bic.w	r3, r3, #32
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	2310      	movs	r3, #16
 8003470:	e7a6      	b.n	80033c0 <_printf_i+0xf8>
 8003472:	4824      	ldr	r0, [pc, #144]	; (8003504 <_printf_i+0x23c>)
 8003474:	e7e4      	b.n	8003440 <_printf_i+0x178>
 8003476:	4615      	mov	r5, r2
 8003478:	e7bd      	b.n	80033f6 <_printf_i+0x12e>
 800347a:	682b      	ldr	r3, [r5, #0]
 800347c:	6826      	ldr	r6, [r4, #0]
 800347e:	1d18      	adds	r0, r3, #4
 8003480:	6961      	ldr	r1, [r4, #20]
 8003482:	6028      	str	r0, [r5, #0]
 8003484:	0635      	lsls	r5, r6, #24
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	d501      	bpl.n	800348e <_printf_i+0x1c6>
 800348a:	6019      	str	r1, [r3, #0]
 800348c:	e002      	b.n	8003494 <_printf_i+0x1cc>
 800348e:	0670      	lsls	r0, r6, #25
 8003490:	d5fb      	bpl.n	800348a <_printf_i+0x1c2>
 8003492:	8019      	strh	r1, [r3, #0]
 8003494:	2300      	movs	r3, #0
 8003496:	4615      	mov	r5, r2
 8003498:	6123      	str	r3, [r4, #16]
 800349a:	e7bc      	b.n	8003416 <_printf_i+0x14e>
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	2100      	movs	r1, #0
 80034a0:	1d1a      	adds	r2, r3, #4
 80034a2:	602a      	str	r2, [r5, #0]
 80034a4:	681d      	ldr	r5, [r3, #0]
 80034a6:	6862      	ldr	r2, [r4, #4]
 80034a8:	4628      	mov	r0, r5
 80034aa:	f000 f859 	bl	8003560 <memchr>
 80034ae:	b108      	cbz	r0, 80034b4 <_printf_i+0x1ec>
 80034b0:	1b40      	subs	r0, r0, r5
 80034b2:	6060      	str	r0, [r4, #4]
 80034b4:	6863      	ldr	r3, [r4, #4]
 80034b6:	6123      	str	r3, [r4, #16]
 80034b8:	2300      	movs	r3, #0
 80034ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034be:	e7aa      	b.n	8003416 <_printf_i+0x14e>
 80034c0:	462a      	mov	r2, r5
 80034c2:	4649      	mov	r1, r9
 80034c4:	4640      	mov	r0, r8
 80034c6:	6923      	ldr	r3, [r4, #16]
 80034c8:	47d0      	blx	sl
 80034ca:	3001      	adds	r0, #1
 80034cc:	d0ad      	beq.n	800342a <_printf_i+0x162>
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	079b      	lsls	r3, r3, #30
 80034d2:	d413      	bmi.n	80034fc <_printf_i+0x234>
 80034d4:	68e0      	ldr	r0, [r4, #12]
 80034d6:	9b03      	ldr	r3, [sp, #12]
 80034d8:	4298      	cmp	r0, r3
 80034da:	bfb8      	it	lt
 80034dc:	4618      	movlt	r0, r3
 80034de:	e7a6      	b.n	800342e <_printf_i+0x166>
 80034e0:	2301      	movs	r3, #1
 80034e2:	4632      	mov	r2, r6
 80034e4:	4649      	mov	r1, r9
 80034e6:	4640      	mov	r0, r8
 80034e8:	47d0      	blx	sl
 80034ea:	3001      	adds	r0, #1
 80034ec:	d09d      	beq.n	800342a <_printf_i+0x162>
 80034ee:	3501      	adds	r5, #1
 80034f0:	68e3      	ldr	r3, [r4, #12]
 80034f2:	9903      	ldr	r1, [sp, #12]
 80034f4:	1a5b      	subs	r3, r3, r1
 80034f6:	42ab      	cmp	r3, r5
 80034f8:	dcf2      	bgt.n	80034e0 <_printf_i+0x218>
 80034fa:	e7eb      	b.n	80034d4 <_printf_i+0x20c>
 80034fc:	2500      	movs	r5, #0
 80034fe:	f104 0619 	add.w	r6, r4, #25
 8003502:	e7f5      	b.n	80034f0 <_printf_i+0x228>
 8003504:	0800364b 	.word	0x0800364b
 8003508:	0800365c 	.word	0x0800365c

0800350c <memmove>:
 800350c:	4288      	cmp	r0, r1
 800350e:	b510      	push	{r4, lr}
 8003510:	eb01 0402 	add.w	r4, r1, r2
 8003514:	d902      	bls.n	800351c <memmove+0x10>
 8003516:	4284      	cmp	r4, r0
 8003518:	4623      	mov	r3, r4
 800351a:	d807      	bhi.n	800352c <memmove+0x20>
 800351c:	1e43      	subs	r3, r0, #1
 800351e:	42a1      	cmp	r1, r4
 8003520:	d008      	beq.n	8003534 <memmove+0x28>
 8003522:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003526:	f803 2f01 	strb.w	r2, [r3, #1]!
 800352a:	e7f8      	b.n	800351e <memmove+0x12>
 800352c:	4601      	mov	r1, r0
 800352e:	4402      	add	r2, r0
 8003530:	428a      	cmp	r2, r1
 8003532:	d100      	bne.n	8003536 <memmove+0x2a>
 8003534:	bd10      	pop	{r4, pc}
 8003536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800353a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800353e:	e7f7      	b.n	8003530 <memmove+0x24>

08003540 <_sbrk_r>:
 8003540:	b538      	push	{r3, r4, r5, lr}
 8003542:	2300      	movs	r3, #0
 8003544:	4d05      	ldr	r5, [pc, #20]	; (800355c <_sbrk_r+0x1c>)
 8003546:	4604      	mov	r4, r0
 8003548:	4608      	mov	r0, r1
 800354a:	602b      	str	r3, [r5, #0]
 800354c:	f7fd fa1a 	bl	8000984 <_sbrk>
 8003550:	1c43      	adds	r3, r0, #1
 8003552:	d102      	bne.n	800355a <_sbrk_r+0x1a>
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	b103      	cbz	r3, 800355a <_sbrk_r+0x1a>
 8003558:	6023      	str	r3, [r4, #0]
 800355a:	bd38      	pop	{r3, r4, r5, pc}
 800355c:	200002dc 	.word	0x200002dc

08003560 <memchr>:
 8003560:	4603      	mov	r3, r0
 8003562:	b510      	push	{r4, lr}
 8003564:	b2c9      	uxtb	r1, r1
 8003566:	4402      	add	r2, r0
 8003568:	4293      	cmp	r3, r2
 800356a:	4618      	mov	r0, r3
 800356c:	d101      	bne.n	8003572 <memchr+0x12>
 800356e:	2000      	movs	r0, #0
 8003570:	e003      	b.n	800357a <memchr+0x1a>
 8003572:	7804      	ldrb	r4, [r0, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	428c      	cmp	r4, r1
 8003578:	d1f6      	bne.n	8003568 <memchr+0x8>
 800357a:	bd10      	pop	{r4, pc}

0800357c <_realloc_r>:
 800357c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003580:	4680      	mov	r8, r0
 8003582:	4614      	mov	r4, r2
 8003584:	460e      	mov	r6, r1
 8003586:	b921      	cbnz	r1, 8003592 <_realloc_r+0x16>
 8003588:	4611      	mov	r1, r2
 800358a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800358e:	f7ff bc45 	b.w	8002e1c <_malloc_r>
 8003592:	b92a      	cbnz	r2, 80035a0 <_realloc_r+0x24>
 8003594:	f7ff fbda 	bl	8002d4c <_free_r>
 8003598:	4625      	mov	r5, r4
 800359a:	4628      	mov	r0, r5
 800359c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035a0:	f000 f81b 	bl	80035da <_malloc_usable_size_r>
 80035a4:	4284      	cmp	r4, r0
 80035a6:	4607      	mov	r7, r0
 80035a8:	d802      	bhi.n	80035b0 <_realloc_r+0x34>
 80035aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80035ae:	d812      	bhi.n	80035d6 <_realloc_r+0x5a>
 80035b0:	4621      	mov	r1, r4
 80035b2:	4640      	mov	r0, r8
 80035b4:	f7ff fc32 	bl	8002e1c <_malloc_r>
 80035b8:	4605      	mov	r5, r0
 80035ba:	2800      	cmp	r0, #0
 80035bc:	d0ed      	beq.n	800359a <_realloc_r+0x1e>
 80035be:	42bc      	cmp	r4, r7
 80035c0:	4622      	mov	r2, r4
 80035c2:	4631      	mov	r1, r6
 80035c4:	bf28      	it	cs
 80035c6:	463a      	movcs	r2, r7
 80035c8:	f7ff fbb2 	bl	8002d30 <memcpy>
 80035cc:	4631      	mov	r1, r6
 80035ce:	4640      	mov	r0, r8
 80035d0:	f7ff fbbc 	bl	8002d4c <_free_r>
 80035d4:	e7e1      	b.n	800359a <_realloc_r+0x1e>
 80035d6:	4635      	mov	r5, r6
 80035d8:	e7df      	b.n	800359a <_realloc_r+0x1e>

080035da <_malloc_usable_size_r>:
 80035da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035de:	1f18      	subs	r0, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bfbc      	itt	lt
 80035e4:	580b      	ldrlt	r3, [r1, r0]
 80035e6:	18c0      	addlt	r0, r0, r3
 80035e8:	4770      	bx	lr
	...

080035ec <_init>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	bf00      	nop
 80035f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f2:	bc08      	pop	{r3}
 80035f4:	469e      	mov	lr, r3
 80035f6:	4770      	bx	lr

080035f8 <_fini>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	bf00      	nop
 80035fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fe:	bc08      	pop	{r3}
 8003600:	469e      	mov	lr, r3
 8003602:	4770      	bx	lr
